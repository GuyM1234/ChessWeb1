{"ast":null,"code":"export class Piece {\n  constructor(spot, lett, color) {\n    this.spot = spot;\n    this.let = lett;\n    this.color = color;\n    this.moved = false;\n  }\n\n  move_options() {\n    return [];\n  }\n\n  move(chosen_spot, game_board) {\n    game_board.update(chosen_spot, this);\n    this.spot = chosen_spot;\n\n    if (!this.moved) {\n      this.moved = true;\n    }\n  }\n\n  create_copy() {\n    return typeof this(this.spot, this.lett, this.color);\n  }\n\n  is_spot_free(row, column, board, move_option) {\n    try {\n      if (board[row][column].color == \"e\") {\n        move_option.push([row, column]);\n      }\n    } catch {}\n  }\n\n  is_spot_eatable(row, column, board, move_option) {\n    try {\n      if (board[row][column].color == get_opp_color(this.color)) {\n        move_option.push([row, column]);\n      }\n    } catch {}\n  }\n\n}\nexport class Pawn extends Piece {\n  move_options(board) {\n    const row = this.spot[0];\n    const column = this.spot[0];\n    const move_options = [];\n\n    if (this.color == \"w\") {\n      this.is_spot_free(row + 1, column, board, move_options);\n\n      if (!this.moved) {\n        this.is_spot_free(row + 2, column, board, move_options);\n      }\n\n      this.is_spot_eatable(row + 1, column + 1, board, move_options);\n      this.is_spot_eatable(row + 1, column - 1, board, move_options);\n    } else {\n      this.is_spot_free(row - 1, column, board, move_options);\n\n      if (!this.moved) {\n        this.is_spot_free(row - 2, column, board, move_options);\n      }\n\n      this.is_spot_eatable(row - 1, column + 1, board, move_options);\n      this.is_spot_eatable(row - 1, column - 1, board, move_options);\n    }\n\n    return move_options;\n  }\n\n}\n\nfunction get_opp_color(color) {\n  if (color == \"w\") {\n    return 'b';\n  } else {\n    return 'w';\n  }\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/Computer_Science/ChessWeb/my-app/src/Components/pieces.js"],"names":["Piece","constructor","spot","lett","color","let","moved","move_options","move","chosen_spot","game_board","update","create_copy","is_spot_free","row","column","board","move_option","push","is_spot_eatable","get_opp_color","Pawn"],"mappings":"AACA,OAAO,MAAMA,KAAN,CAAY;AACfC,EAAAA,WAAW,CAAEC,IAAF,EAAOC,IAAP,EAAYC,KAAZ,EAAkB;AACzB,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKG,GAAL,GAAWF,IAAX;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKE,KAAL,GAAa,KAAb;AACH;;AAEDC,EAAAA,YAAY,GAAI;AACZ,WAAO,EAAP;AACH;;AAEDC,EAAAA,IAAI,CAAEC,WAAF,EAAcC,UAAd,EAAyB;AACzBA,IAAAA,UAAU,CAACC,MAAX,CAAkBF,WAAlB,EAA8B,IAA9B;AACA,SAAKP,IAAL,GAAYO,WAAZ;;AACA,QAAI,CAAC,KAAKH,KAAV,EAAiB;AACb,WAAKA,KAAL,GAAa,IAAb;AACH;AACJ;;AAEDM,EAAAA,WAAW,GAAI;AACX,WAAO,OAAO,IAAD,CAAO,KAAKV,IAAZ,EAAiB,KAAKC,IAAtB,EAA2B,KAAKC,KAAhC,CAAb;AACH;;AAEDS,EAAAA,YAAY,CAACC,GAAD,EAAKC,MAAL,EAAYC,KAAZ,EAAkBC,WAAlB,EAA+B;AACvC,QAAI;AACA,UAAID,KAAK,CAACF,GAAD,CAAL,CAAWC,MAAX,EAAmBX,KAAnB,IAA4B,GAAhC,EAAoC;AAChCa,QAAAA,WAAW,CAACC,IAAZ,CAAiB,CAACJ,GAAD,EAAKC,MAAL,CAAjB;AACH;AACJ,KAJD,CAKA,MAAM,CAEL;AAEJ;;AACDI,EAAAA,eAAe,CAACL,GAAD,EAAKC,MAAL,EAAYC,KAAZ,EAAkBC,WAAlB,EAA+B;AAC1C,QAAG;AACC,UAAID,KAAK,CAACF,GAAD,CAAL,CAAWC,MAAX,EAAmBX,KAAnB,IAA4BgB,aAAa,CAAC,KAAKhB,KAAN,CAA7C,EAA0D;AACtDa,QAAAA,WAAW,CAACC,IAAZ,CAAiB,CAACJ,GAAD,EAAKC,MAAL,CAAjB;AACH;AACJ,KAJD,CAKA,MAAK,CAEJ;AAEJ;;AA7Cc;AAiDnB,OAAO,MAAMM,IAAN,SAAmBrB,KAAnB,CAAwB;AAC3BO,EAAAA,YAAY,CAACS,KAAD,EAAQ;AAChB,UAAMF,GAAG,GAAG,KAAKZ,IAAL,CAAU,CAAV,CAAZ;AACA,UAAMa,MAAM,GAAG,KAAKb,IAAL,CAAU,CAAV,CAAf;AACA,UAAMK,YAAY,GAAG,EAArB;;AACA,QAAK,KAAKH,KAAL,IAAc,GAAnB,EAAuB;AACnB,WAAKS,YAAL,CAAkBC,GAAG,GAAG,CAAxB,EAA2BC,MAA3B,EAAkCC,KAAlC,EAAwCT,YAAxC;;AACA,UAAI,CAAC,KAAKD,KAAV,EAAgB;AACZ,aAAKO,YAAL,CAAkBC,GAAG,GAAG,CAAxB,EAA0BC,MAA1B,EAAiCC,KAAjC,EAAuCT,YAAvC;AACH;;AACD,WAAKY,eAAL,CAAqBL,GAAG,GAAG,CAA3B,EAA8BC,MAAM,GAAG,CAAvC,EAAyCC,KAAzC,EAA+CT,YAA/C;AACA,WAAKY,eAAL,CAAqBL,GAAG,GAAG,CAA3B,EAA8BC,MAAM,GAAG,CAAvC,EAAyCC,KAAzC,EAA+CT,YAA/C;AACH,KAPD,MAQK;AACD,WAAKM,YAAL,CAAkBC,GAAG,GAAG,CAAxB,EAA2BC,MAA3B,EAAkCC,KAAlC,EAAwCT,YAAxC;;AACA,UAAI,CAAC,KAAKD,KAAV,EAAgB;AACZ,aAAKO,YAAL,CAAkBC,GAAG,GAAG,CAAxB,EAA0BC,MAA1B,EAAiCC,KAAjC,EAAuCT,YAAvC;AACH;;AACD,WAAKY,eAAL,CAAqBL,GAAG,GAAG,CAA3B,EAA8BC,MAAM,GAAG,CAAvC,EAAyCC,KAAzC,EAA+CT,YAA/C;AACA,WAAKY,eAAL,CAAqBL,GAAG,GAAG,CAA3B,EAA8BC,MAAM,GAAG,CAAvC,EAAyCC,KAAzC,EAA+CT,YAA/C;AACH;;AACD,WAAOA,YAAP;AACH;;AAtB0B;;AAyB/B,SAASa,aAAT,CAAwBhB,KAAxB,EAA+B;AAC3B,MAAIA,KAAK,IAAI,GAAb,EAAkB;AACd,WAAO,GAAP;AACH,GAFD,MAGI;AACA,WAAO,GAAP;AACH;AACJ","sourcesContent":["\r\nexport class Piece {\r\n    constructor (spot,lett,color){\r\n        this.spot = spot\r\n        this.let = lett\r\n        this.color = color\r\n        this.moved = false\r\n    }\r\n\r\n    move_options () {\r\n        return []\r\n    }\r\n\r\n    move (chosen_spot,game_board){\r\n        game_board.update(chosen_spot,this)\r\n        this.spot = chosen_spot\r\n        if (!this.moved) {\r\n            this.moved = true\r\n        }\r\n    }\r\n    \r\n    create_copy () {\r\n        return typeof(this)(this.spot,this.lett,this.color)\r\n    }\r\n    \r\n    is_spot_free(row,column,board,move_option) {\r\n        try {\r\n            if (board[row][column].color == \"e\"){\r\n                move_option.push([row,column])\r\n            }\r\n        }\r\n        catch {\r\n            \r\n        }\r\n        \r\n    }\r\n    is_spot_eatable(row,column,board,move_option) {\r\n        try{\r\n            if (board[row][column].color == get_opp_color(this.color)){\r\n                move_option.push([row,column])\r\n            }\r\n        }\r\n        catch{\r\n\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n\r\nexport class Pawn extends Piece{\r\n    move_options(board) {\r\n        const row = this.spot[0]\r\n        const column = this.spot[0]\r\n        const move_options = []\r\n        if  (this.color == \"w\"){\r\n            this.is_spot_free(row + 1, column,board,move_options)\r\n            if (!this.moved){\r\n                this.is_spot_free(row + 2,column,board,move_options)\r\n            } \r\n            this.is_spot_eatable(row + 1, column + 1,board,move_options)\r\n            this.is_spot_eatable(row + 1, column - 1,board,move_options)\r\n        }\r\n        else {\r\n            this.is_spot_free(row - 1, column,board,move_options)\r\n            if (!this.moved){\r\n                this.is_spot_free(row - 2,column,board,move_options)\r\n            }\r\n            this.is_spot_eatable(row - 1, column + 1,board,move_options)\r\n            this.is_spot_eatable(row - 1, column - 1,board,move_options)\r\n        }\r\n        return move_options;\r\n    }\r\n}\r\n\r\nfunction get_opp_color (color) {\r\n    if (color == \"w\") {\r\n        return 'b'\r\n    }\r\n    else{\r\n        return 'w'\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}