{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Computer_Science\\\\ChessWeb1\\\\src\\\\Components\\\\Board.js\";\nimport React from \"react\";\nimport Block from \"./Block\";\nimport Game from \"./Game\";\n\nclass Board extends React.Component {\n  constructor() {\n    super();\n\n    this.handlePiece = piece => {\n      const row = piece.spot[0];\n      const column = piece.spot[1];\n      this.setState(prevState => {\n        if (this.state.piece === null) {\n          const move_options = piece.move_options(this.game.board);\n\n          if (move_options.length > 0) {\n            return {\n              piece: piece,\n              graphicBoard: prevState.graphicBoard\n            };\n          }\n        } else {\n          //this.IsSpotInOptions(piece.spot, prevState.piece.move_options())\n          let graphicBoard = prevState.graphicBoard;\n\n          if (true) {\n            this.game.board[prevState.piece.spot[0]][prevState.piece.spot[1]].move([row, column], this.game);\n            graphicBoard = this.game.board.map(row => row.map(piece => /*#__PURE__*/_jsxDEV(Block, {\n              piece: piece,\n              handlePiece: this.handlePiece\n            }, piece.spot, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 74\n            }, this)));\n          }\n\n          console.log(\"hi\");\n          return {\n            chosenPiece: null,\n            graphicBoard: graphicBoard\n          };\n        }\n      }); // if (this.state.chosenPiece === \" \") {\n      //   const move_options = piece.move_options(this.game.board) \n      //   if (move_options.length > 0) {\n      //     this.setState({chosenPiece: this.game.board[row][column], move_options: move_options})\n      //   }\n      // }\n      // else {\n      //   if (this.IsSpotInOptions(piece.spot,this.state.move_options)) {\n      //     this.state.chosenPiece.move(piece.spot, this.game)\n      //     // this.graphicBoard[row][column] = <Block key = {piece.spot} piece = {this.state.chosenPiece} handlePiece = {this.handlePiece} />\n      //     this.graphicBoard[row][column].props.piece = \n      //   }\n      //   this.setState({chosenPiece:\" \", move_options:[]})\n      // }\n    };\n\n    this.IsSpotInOptions = (spot, move_options) => {\n      for (let index = 0; index < move_options.length; index++) {\n        const element = move_options[index];\n\n        if (element[0] === spot[0] && element[1] === spot[1]) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.game = new Game();\n    this.state = {\n      piece: null,\n      graphicBoard: this.game.board.map(row => row.map(piece => /*#__PURE__*/_jsxDEV(Block, {\n        piece: piece,\n        handlePiece: this.handlePiece\n      }, piece.spot, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 69\n      }, this))) // move_options: []\n\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: this.state.graphicBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["C:/Users/user/Desktop/Computer_Science/ChessWeb1/src/Components/Board.js"],"names":["React","Block","Game","Board","Component","constructor","handlePiece","piece","row","spot","column","setState","prevState","state","move_options","game","board","length","graphicBoard","move","map","console","log","chosenPiece","IsSpotInOptions","index","element","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Block from \"./Block\"\r\nimport Game from \"./Game\";\r\n\r\nclass Board extends React.Component {\r\n\r\n    constructor () {\r\n        super()\r\n        this.game = new Game()\r\n        this.state = {\r\n          piece: null,\r\n          graphicBoard: this.game.board.map(row => row.map(piece => <Block key = {piece.spot} piece = {piece} handlePiece = {this.handlePiece} />))\r\n          // move_options: []\r\n        }\r\n        \r\n    }\r\n\r\n    handlePiece = (piece) => {\r\n        const row = piece.spot[0]\r\n        const column = piece.spot[1]\r\n        this.setState(prevState => {\r\n          if (this.state.piece === null) {\r\n              const move_options = piece.move_options(this.game.board) \r\n              if (move_options.length > 0) { \r\n                return {piece: piece, graphicBoard: prevState.graphicBoard}\r\n              }\r\n            }\r\n          else{\r\n            //this.IsSpotInOptions(piece.spot, prevState.piece.move_options())\r\n            let graphicBoard = prevState.graphicBoard\r\n            if (true) {\r\n              this.game.board[prevState.piece.spot[0]][prevState.piece.spot[1]].move([row,column],this.game)\r\n              graphicBoard = this.game.board.map(row => row.map(piece => <Block key = {piece.spot} piece = {piece} handlePiece = {this.handlePiece} />))          \r\n            }\r\n            console.log(\"hi\")\r\n            return {chosenPiece: null, graphicBoard: graphicBoard}\r\n          }\r\n        })\r\n        // if (this.state.chosenPiece === \" \") {\r\n        //   const move_options = piece.move_options(this.game.board) \r\n        //   if (move_options.length > 0) {\r\n        //     this.setState({chosenPiece: this.game.board[row][column], move_options: move_options})\r\n        //   }\r\n        // }\r\n        // else {\r\n        //   if (this.IsSpotInOptions(piece.spot,this.state.move_options)) {\r\n        //     this.state.chosenPiece.move(piece.spot, this.game)\r\n        //     // this.graphicBoard[row][column] = <Block key = {piece.spot} piece = {this.state.chosenPiece} handlePiece = {this.handlePiece} />\r\n        //     this.graphicBoard[row][column].props.piece = \r\n        //   }\r\n        //   this.setState({chosenPiece:\" \", move_options:[]})\r\n        // }\r\n      }\r\n\r\n      IsSpotInOptions = (spot,move_options) => {\r\n        for (let index = 0; index < move_options.length; index++) {\r\n          const element = move_options[index];\r\n          if (element[0] === spot[0] && element[1] === spot[1]) {\r\n            return true\r\n          }\r\n        }\r\n        return false\r\n      }\r\n\r\n      render () {\r\n        return (\r\n            <div className=\"board\">\r\n                {this.state.graphicBoard}\r\n            </div> \r\n        )\r\n      }  \r\n}\r\nexport default Board"]},"metadata":{},"sourceType":"module"}