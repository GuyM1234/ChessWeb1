{"ast":null,"code":"import { Piece, Pawn } from \"./pieces\";\n\nclass GameBoard {\n  constructor() {\n    this.board = this.createBoard();\n  }\n\n  createBoard() {\n    const board = [];\n\n    for (let row = 2; row < 6; row++) {\n      const row = [];\n\n      for (let column = 0; column < 8; column++) {\n        let p = new Piece((row, column), '0', 'e');\n        row.push(p);\n      }\n\n      board.push(row);\n    } // for (let i = 0; i < 8; i++) {\n    //     board[6][i] = new Pawn((6,i),'P','w')\n    //     board[1][i] = new  Pawn((1,i),'P','b')\n    // }\n\n\n    board[6] = board[6].map(x => x = new Pawn((6, x), 'P', 'w'));\n  }\n\n}\n\nexport default GameBoard;","map":{"version":3,"sources":["C:/Users/user/Desktop/Computer_Science/ChessWeb/my-app/src/Components/GameBoard.js"],"names":["Piece","Pawn","GameBoard","constructor","board","createBoard","row","column","p","push","map","x"],"mappings":"AAAA,SAASA,KAAT,EAAiBC,IAAjB,QAA6B,UAA7B;;AAGA,MAAMC,SAAN,CAAgB;AACZC,EAAAA,WAAW,GAAG;AACV,SAAKC,KAAL,GAAa,KAAKC,WAAL,EAAb;AACH;;AACDA,EAAAA,WAAW,GAAI;AACX,UAAMD,KAAK,GAAG,EAAd;;AACA,SAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,CAAxB,EAA2BA,GAAG,EAA9B,EAAkC;AAC9B,YAAMA,GAAG,GAAG,EAAZ;;AACA,WAAK,IAAIC,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAG,CAA9B,EAAiCA,MAAM,EAAvC,EAA2C;AACvC,YAAIC,CAAC,GAAG,IAAIR,KAAJ,EAAWM,GAAG,EAACC,MAAf,GAAuB,GAAvB,EAA2B,GAA3B,CAAR;AACAD,QAAAA,GAAG,CAACG,IAAJ,CAASD,CAAT;AACH;;AACDJ,MAAAA,KAAK,CAACK,IAAN,CAAWH,GAAX;AACH,KATU,CAUX;AACA;AACA;AACA;;;AACAF,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,CAASM,GAAT,CAAaC,CAAC,IAAIA,CAAC,GAAG,IAAIV,IAAJ,EAAU,GAAEU,CAAZ,GAAe,GAAf,EAAmB,GAAnB,CAAtB,CAAX;AACH;;AAnBW;;AAsBhB,eAAeT,SAAf","sourcesContent":["import { Piece , Pawn}  from \"./pieces\"\r\n\r\n\r\nclass GameBoard {\r\n    constructor() {\r\n        this.board = this.createBoard()\r\n    }\r\n    createBoard () {\r\n        const board = []\r\n        for (let row = 2; row < 6; row++) {\r\n            const row = []\r\n            for (let column = 0; column < 8; column++) {\r\n                let p = new Piece((row,column),'0','e')\r\n                row.push(p);\r\n            }\r\n            board.push(row)\r\n        }\r\n        // for (let i = 0; i < 8; i++) {\r\n        //     board[6][i] = new Pawn((6,i),'P','w')\r\n        //     board[1][i] = new  Pawn((1,i),'P','b')\r\n        // }\r\n        board[6] = board[6].map(x => x = new Pawn((6,x),'P','w'))\r\n    }   \r\n}\r\n\r\nexport default GameBoard"]},"metadata":{},"sourceType":"module"}