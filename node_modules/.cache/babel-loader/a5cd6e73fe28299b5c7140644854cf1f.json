{"ast":null,"code":"import _get from\"C:/Users/user/Desktop/Computer_Science/ChessWeb1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";import _getPrototypeOf from\"C:/Users/user/Desktop/Computer_Science/ChessWeb1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:/Users/user/Desktop/Computer_Science/ChessWeb1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/user/Desktop/Computer_Science/ChessWeb1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _classCallCheck from\"C:/Users/user/Desktop/Computer_Science/ChessWeb1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/user/Desktop/Computer_Science/ChessWeb1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import{get_opp_color}from\"./Methods\";import{Copy_Game}from\"./Game\";export var Piece=/*#__PURE__*/function(){function Piece(spot,lett,color){_classCallCheck(this,Piece);this.spot=spot;this.lett=lett;this.color=color;this.moved=false;}_createClass(Piece,[{key:\"move_options\",value:function move_options(){return[];}},{key:\"getAvaliableMoves\",value:function getAvaliableMoves(game){var move_options=this.move_options(game);var newMoveOptions=[];for(var index=0;index<move_options.length;index++){var option=move_options[index];var copyGame=new Copy_Game(game);copyGame.board[this.spot[0]][this.spot[1]].move(option,copyGame);if(!copyGame.isCheck()){newMoveOptions.push(option);}}return newMoveOptions;}},{key:\"move\",value:function move(chosen_spot,game){game.update(chosen_spot,this);this.spot=chosen_spot;if(!this.moved){this.moved=true;}}},{key:\"check_dir\",value:function check_dir(rowDir,columnDir,board,option_list){var row=this.spot[0];var column=this.spot[1];var blocked=false;while(!blocked){row+=rowDir;column+=columnDir;if(!this.is_spot_free(row,column,board,option_list)){blocked=true;this.is_spot_eatable(row,column,board,option_list);}}}},{key:\"create_copy\",value:function create_copy(){return new Piece(this.spot,this.lett,this.color);}},{key:\"is_spot_free\",value:function is_spot_free(row,column,board,move_option){try{if(board[row][column].color===\"e\"){move_option.push([row,column]);return true;}else{return false;}}catch(_unused){}}},{key:\"is_spot_eatable\",value:function is_spot_eatable(row,column,board,move_option){try{if(board[row][column].color===get_opp_color(this.color)){move_option.push([row,column]);}}catch(_unused2){}}}]);return Piece;}();export var Pawn=/*#__PURE__*/function(_Piece){_inherits(Pawn,_Piece);var _super=_createSuper(Pawn);function Pawn(){_classCallCheck(this,Pawn);return _super.apply(this,arguments);}_createClass(Pawn,[{key:\"move\",value:function move(chosen_spot,game){_get(_getPrototypeOf(Pawn.prototype),\"move\",this).call(this,chosen_spot,game);if(this.spot[0]===0||this.spot[0]===7){game.board[this.spot[0]][this.spot[1]]=new Queen(this.spot,'Q',this.color);}}},{key:\"move_options\",value:function move_options(game){var board=game.board;var row=this.spot[0];var column=this.spot[1];var move_options=[];if(this.color===\"w\"){this.is_spot_free(row-1,column,board,move_options);if(!this.moved){this.is_spot_free(row-2,column,board,move_options);}this.is_spot_eatable(row-1,column+1,board,move_options);this.is_spot_eatable(row-1,column-1,board,move_options);}else{this.is_spot_free(row+1,column,board,move_options);if(!this.moved){this.is_spot_free(row+2,column,board,move_options);}this.is_spot_eatable(row+1,column+1,board,move_options);this.is_spot_eatable(row+1,column-1,board,move_options);}return move_options;}},{key:\"create_copy\",value:function create_copy(){return new Pawn(this.spot,this.lett,this.color);}}]);return Pawn;}(Piece);export var Rook=/*#__PURE__*/function(_Piece2){_inherits(Rook,_Piece2);var _super2=_createSuper(Rook);function Rook(){_classCallCheck(this,Rook);return _super2.apply(this,arguments);}_createClass(Rook,[{key:\"move_options\",value:function move_options(game){var board=game.board;var option_list=[];this.check_dir(1,0,board,option_list);this.check_dir(-1,0,board,option_list);this.check_dir(0,1,board,option_list);this.check_dir(0,-1,board,option_list);return option_list;}},{key:\"create_copy\",value:function create_copy(){return new Rook(this.spot,this.lett,this.color);}}]);return Rook;}(Piece);export var Bishop=/*#__PURE__*/function(_Piece3){_inherits(Bishop,_Piece3);var _super3=_createSuper(Bishop);function Bishop(){_classCallCheck(this,Bishop);return _super3.apply(this,arguments);}_createClass(Bishop,[{key:\"move_options\",value:function move_options(game){var board=game.board;var option_list=[];this.check_dir(1,1,board,option_list);this.check_dir(-1,-1,board,option_list);this.check_dir(-1,1,board,option_list);this.check_dir(1,-1,board,option_list);return option_list;}},{key:\"create_copy\",value:function create_copy(){return new Bishop(this.spot,this.lett,this.color);}}]);return Bishop;}(Piece);export var Queen=/*#__PURE__*/function(_Piece4){_inherits(Queen,_Piece4);var _super4=_createSuper(Queen);function Queen(){_classCallCheck(this,Queen);return _super4.apply(this,arguments);}_createClass(Queen,[{key:\"move_options\",value:function move_options(game){var board=game.board;var option_list=[];this.check_dir(1,0,board,option_list);this.check_dir(-1,0,board,option_list);this.check_dir(0,1,board,option_list);this.check_dir(0,-1,board,option_list);this.check_dir(1,1,board,option_list);this.check_dir(-1,-1,board,option_list);this.check_dir(-1,1,board,option_list);this.check_dir(1,-1,board,option_list);return option_list;}},{key:\"create_copy\",value:function create_copy(){return new Queen(this.spot,this.lett,this.color);}}]);return Queen;}(Piece);export var King=/*#__PURE__*/function(_Piece5){_inherits(King,_Piece5);var _super5=_createSuper(King);function King(){_classCallCheck(this,King);return _super5.apply(this,arguments);}_createClass(King,[{key:\"move\",value:function move(chosen_spot,game){if(!this.moved){if(chosen_spot[1]===2){game.board[this.spot[0]][0].move([this.spot[0],3],game);}if(chosen_spot[1]===6){game.board[this.spot[0]][7].move([this.spot[0],5],game);}}_get(_getPrototypeOf(King.prototype),\"move\",this).call(this,chosen_spot,game);}},{key:\"move_options\",value:function move_options(game){var board=game.board;var option_list=[];var row=this.spot[0];var column=this.spot[1];var options=[[row+1,column],[row+1,column+1],[row,column+1],[row-1,column+1],[row-1,column],[row-1,column-1],[row,column-1],[row+1,column-1]];var option;for(var index=0;index<options.length;index++){option=options[index];if(!this.is_spot_free(option[0],option[1],board,option_list)){this.is_spot_eatable(option[0],option[1],board,option_list);}}var route1=[[this.spot[0],3],[this.spot[0],2],[this.spot[0],1]];var route2=[[this.spot[0],5],[this.spot[0],6]];try{if(this.castle(game,route1,game.board[this.spot[0]][0])){option_list.push([this.spot[0],2]);}if(this.castle(game,route2,game.board[this.spot[0]][7])){option_list.push([this.spot[0],6]);}}catch(_unused3){}return option_list;}},{key:\"castle\",value:function castle(game,route,rook){if(!this.moved&&!rook.moved){for(var i=0;i<route.length;i++){var square=route[i];if(game.board[square[0]][square[1]].color!=='e'){return false;}var copyGame=new Copy_Game(game);copyGame.board[this.spot[0]][this.spot[1]].move(square,copyGame);if(copyGame.isCheck()){return false;}}}else{return false;}return true;}},{key:\"create_copy\",value:function create_copy(){return new King(this.spot,this.lett,this.color);}}]);return King;}(Piece);export var Knight=/*#__PURE__*/function(_Piece6){_inherits(Knight,_Piece6);var _super6=_createSuper(Knight);function Knight(){_classCallCheck(this,Knight);return _super6.apply(this,arguments);}_createClass(Knight,[{key:\"move_options\",value:function move_options(game){var board=game.board;var option_list=[];var row=this.spot[0];var column=this.spot[1];var options=[[row+2,column+1],[row+2,column-1],[row-1,column+2],[row-2,column+1],[row-2,column-1],[row+1,column+2],[row+1,column-2],[row-1,column-2]];var option;for(var index=0;index<options.length;index++){option=options[index];if(!this.is_spot_free(option[0],option[1],board,option_list)){this.is_spot_eatable(option[0],option[1],board,option_list);}}return option_list;}},{key:\"create_copy\",value:function create_copy(){return new Knight(this.spot,this.lett,this.color);}}]);return Knight;}(Piece);","map":{"version":3,"sources":["C:/Users/user/Desktop/Computer_Science/ChessWeb1/src/Components/pieces.js"],"names":["get_opp_color","Copy_Game","Piece","spot","lett","color","moved","game","move_options","newMoveOptions","index","length","option","copyGame","board","move","isCheck","push","chosen_spot","update","rowDir","columnDir","option_list","row","column","blocked","is_spot_free","is_spot_eatable","move_option","Pawn","Queen","Rook","check_dir","Bishop","King","options","route1","route2","castle","route","rook","i","square","Knight"],"mappings":"w8BAAA,OAASA,aAAT,KAA8B,WAA9B,CACA,OAAQC,SAAR,KAAwB,QAAxB,CAGA,UAAaC,CAAAA,KAAb,yBACI,eAAaC,IAAb,CAAkBC,IAAlB,CAAuBC,KAAvB,CAA6B,6BACzB,KAAKF,IAAL,CAAYA,IAAZ,CACA,KAAKC,IAAL,CAAYA,IAAZ,CACA,KAAKC,KAAL,CAAaA,KAAb,CACA,KAAKC,KAAL,CAAa,KAAb,CACH,CANL,qEAQmB,CACX,MAAO,EAAP,CACH,CAVL,4DAYsBC,IAZtB,CAY4B,CACpB,GAAMC,CAAAA,YAAY,CAAG,KAAKA,YAAL,CAAkBD,IAAlB,CAArB,CACA,GAAIE,CAAAA,cAAc,CAAG,EAArB,CACA,IAAK,GAAIC,CAAAA,KAAK,CAAG,CAAjB,CAAoBA,KAAK,CAAGF,YAAY,CAACG,MAAzC,CAAiDD,KAAK,EAAtD,CAA0D,CACtD,GAAME,CAAAA,MAAM,CAAGJ,YAAY,CAACE,KAAD,CAA3B,CACA,GAAMG,CAAAA,QAAQ,CAAG,GAAIZ,CAAAA,SAAJ,CAAcM,IAAd,CAAjB,CACAM,QAAQ,CAACC,KAAT,CAAe,KAAKX,IAAL,CAAU,CAAV,CAAf,EAA6B,KAAKA,IAAL,CAAU,CAAV,CAA7B,EAA2CY,IAA3C,CAAgDH,MAAhD,CAAuDC,QAAvD,EACA,GAAI,CAACA,QAAQ,CAACG,OAAT,EAAL,CAAyB,CACrBP,cAAc,CAACQ,IAAf,CAAoBL,MAApB,EACH,CACJ,CACD,MAAOH,CAAAA,cAAP,CACH,CAxBL,kCA0BUS,WA1BV,CA0BsBX,IA1BtB,CA0B2B,CACnBA,IAAI,CAACY,MAAL,CAAYD,WAAZ,CAAwB,IAAxB,EACA,KAAKf,IAAL,CAAYe,WAAZ,CACA,GAAI,CAAC,KAAKZ,KAAV,CAAiB,CACb,KAAKA,KAAL,CAAa,IAAb,CACH,CACJ,CAhCL,4CAkCec,MAlCf,CAkCsBC,SAlCtB,CAkCgCP,KAlChC,CAkCsCQ,WAlCtC,CAkCmD,CAC3C,GAAIC,CAAAA,GAAG,CAAG,KAAKpB,IAAL,CAAU,CAAV,CAAV,CACA,GAAIqB,CAAAA,MAAM,CAAG,KAAKrB,IAAL,CAAU,CAAV,CAAb,CACA,GAAIsB,CAAAA,OAAO,CAAG,KAAd,CACA,MAAO,CAACA,OAAR,CAAiB,CACbF,GAAG,EAAIH,MAAP,CACAI,MAAM,EAAIH,SAAV,CACA,GAAI,CAAC,KAAKK,YAAL,CAAkBH,GAAlB,CAAuBC,MAAvB,CAA+BV,KAA/B,CAAsCQ,WAAtC,CAAL,CAAwD,CACpDG,OAAO,CAAG,IAAV,CACA,KAAKE,eAAL,CAAqBJ,GAArB,CAA0BC,MAA1B,CAAkCV,KAAlC,CAAyCQ,WAAzC,EACH,CACJ,CACJ,CA9CL,iDAgDmB,CACX,MAAO,IAAIpB,CAAAA,KAAJ,CAAU,KAAKC,IAAf,CAAoB,KAAKC,IAAzB,CAA8B,KAAKC,KAAnC,CAAP,CACH,CAlDL,kDAoDiBkB,GApDjB,CAoDqBC,MApDrB,CAoD4BV,KApD5B,CAoDkCc,WApDlC,CAoD+C,CACvC,GAAI,CACA,GAAId,KAAK,CAACS,GAAD,CAAL,CAAWC,MAAX,EAAmBnB,KAAnB,GAA6B,GAAjC,CAAqC,CACjCuB,WAAW,CAACX,IAAZ,CAAiB,CAACM,GAAD,CAAKC,MAAL,CAAjB,EACA,MAAO,KAAP,CACH,CAHD,IAII,CACA,MAAO,MAAP,CACH,CACJ,CACD,cAAM,CAAE,CACX,CA/DL,wDAiEoBD,GAjEpB,CAiEwBC,MAjExB,CAiE+BV,KAjE/B,CAiEqCc,WAjErC,CAiEkD,CAC1C,GAAG,CACC,GAAId,KAAK,CAACS,GAAD,CAAL,CAAWC,MAAX,EAAmBnB,KAAnB,GAA6BL,aAAa,CAAC,KAAKK,KAAN,CAA9C,CAA2D,CACvDuB,WAAW,CAACX,IAAZ,CAAiB,CAACM,GAAD,CAAKC,MAAL,CAAjB,EACH,CACJ,CACD,eAAM,CAAE,CACX,CAxEL,qBA2EA,UAAaK,CAAAA,IAAb,uNACUX,WADV,CACsBX,IADtB,CAC4B,CACpB,4DAAWW,WAAX,CAAuBX,IAAvB,EACA,GAAI,KAAKJ,IAAL,CAAU,CAAV,IAAiB,CAAjB,EAAsB,KAAKA,IAAL,CAAU,CAAV,IAAiB,CAA3C,CAA8C,CAC1CI,IAAI,CAACO,KAAL,CAAW,KAAKX,IAAL,CAAU,CAAV,CAAX,EAAyB,KAAKA,IAAL,CAAU,CAAV,CAAzB,EAAyC,GAAI2B,CAAAA,KAAJ,CAAU,KAAK3B,IAAf,CAAoB,GAApB,CAAwB,KAAKE,KAA7B,CAAzC,CACH,CACJ,CANL,kDAQiBE,IARjB,CAQuB,CACf,GAAMO,CAAAA,KAAK,CAAGP,IAAI,CAACO,KAAnB,CACA,GAAMS,CAAAA,GAAG,CAAG,KAAKpB,IAAL,CAAU,CAAV,CAAZ,CACA,GAAMqB,CAAAA,MAAM,CAAG,KAAKrB,IAAL,CAAU,CAAV,CAAf,CACA,GAAMK,CAAAA,YAAY,CAAG,EAArB,CACA,GAAK,KAAKH,KAAL,GAAe,GAApB,CAAwB,CACpB,KAAKqB,YAAL,CAAkBH,GAAG,CAAG,CAAxB,CAA2BC,MAA3B,CAAkCV,KAAlC,CAAwCN,YAAxC,EACA,GAAI,CAAC,KAAKF,KAAV,CAAgB,CACZ,KAAKoB,YAAL,CAAkBH,GAAG,CAAG,CAAxB,CAA0BC,MAA1B,CAAiCV,KAAjC,CAAuCN,YAAvC,EACH,CACD,KAAKmB,eAAL,CAAqBJ,GAAG,CAAG,CAA3B,CAA8BC,MAAM,CAAG,CAAvC,CAAyCV,KAAzC,CAA+CN,YAA/C,EACA,KAAKmB,eAAL,CAAqBJ,GAAG,CAAG,CAA3B,CAA8BC,MAAM,CAAG,CAAvC,CAAyCV,KAAzC,CAA+CN,YAA/C,EACH,CAPD,IAQK,CACD,KAAKkB,YAAL,CAAkBH,GAAG,CAAG,CAAxB,CAA2BC,MAA3B,CAAkCV,KAAlC,CAAwCN,YAAxC,EACA,GAAI,CAAC,KAAKF,KAAV,CAAgB,CACZ,KAAKoB,YAAL,CAAkBH,GAAG,CAAG,CAAxB,CAA0BC,MAA1B,CAAiCV,KAAjC,CAAuCN,YAAvC,EACH,CACD,KAAKmB,eAAL,CAAqBJ,GAAG,CAAG,CAA3B,CAA8BC,MAAM,CAAG,CAAvC,CAAyCV,KAAzC,CAA+CN,YAA/C,EACA,KAAKmB,eAAL,CAAqBJ,GAAG,CAAG,CAA3B,CAA8BC,MAAM,CAAG,CAAvC,CAAyCV,KAAzC,CAA+CN,YAA/C,EACH,CACD,MAAOA,CAAAA,YAAP,CACH,CA9BL,iDAgCmB,CACX,MAAO,IAAIqB,CAAAA,IAAJ,CAAS,KAAK1B,IAAd,CAAmB,KAAKC,IAAxB,CAA6B,KAAKC,KAAlC,CAAP,CACH,CAlCL,kBAA0BH,KAA1B,EAqCA,UAAa6B,CAAAA,IAAb,2OACiBxB,IADjB,CACuB,CACf,GAAMO,CAAAA,KAAK,CAAGP,IAAI,CAACO,KAAnB,CACA,GAAMQ,CAAAA,WAAW,CAAG,EAApB,CACA,KAAKU,SAAL,CAAe,CAAf,CAAiB,CAAjB,CAAmBlB,KAAnB,CAAyBQ,WAAzB,EACA,KAAKU,SAAL,CAAe,CAAC,CAAhB,CAAkB,CAAlB,CAAoBlB,KAApB,CAA0BQ,WAA1B,EACA,KAAKU,SAAL,CAAe,CAAf,CAAiB,CAAjB,CAAmBlB,KAAnB,CAAyBQ,WAAzB,EACA,KAAKU,SAAL,CAAe,CAAf,CAAiB,CAAC,CAAlB,CAAoBlB,KAApB,CAA0BQ,WAA1B,EACA,MAAOA,CAAAA,WAAP,CACH,CATL,iDAUmB,CACX,MAAO,IAAIS,CAAAA,IAAJ,CAAS,KAAK5B,IAAd,CAAmB,KAAKC,IAAxB,CAA6B,KAAKC,KAAlC,CAAP,CACH,CAZL,kBAA0BH,KAA1B,EAeA,UAAa+B,CAAAA,MAAb,qPACiB1B,IADjB,CACuB,CACf,GAAMO,CAAAA,KAAK,CAAGP,IAAI,CAACO,KAAnB,CACA,GAAMQ,CAAAA,WAAW,CAAG,EAApB,CACA,KAAKU,SAAL,CAAe,CAAf,CAAiB,CAAjB,CAAmBlB,KAAnB,CAAyBQ,WAAzB,EACA,KAAKU,SAAL,CAAe,CAAC,CAAhB,CAAkB,CAAC,CAAnB,CAAqBlB,KAArB,CAA2BQ,WAA3B,EACA,KAAKU,SAAL,CAAe,CAAC,CAAhB,CAAkB,CAAlB,CAAoBlB,KAApB,CAA0BQ,WAA1B,EACA,KAAKU,SAAL,CAAe,CAAf,CAAiB,CAAC,CAAlB,CAAoBlB,KAApB,CAA0BQ,WAA1B,EACA,MAAOA,CAAAA,WAAP,CACH,CATL,iDAUmB,CACX,MAAO,IAAIW,CAAAA,MAAJ,CAAW,KAAK9B,IAAhB,CAAqB,KAAKC,IAA1B,CAA+B,KAAKC,KAApC,CAAP,CACH,CAZL,oBAA4BH,KAA5B,EAeA,UAAa4B,CAAAA,KAAb,gPACiBvB,IADjB,CACuB,CACf,GAAMO,CAAAA,KAAK,CAAGP,IAAI,CAACO,KAAnB,CACA,GAAIQ,CAAAA,WAAW,CAAG,EAAlB,CACA,KAAKU,SAAL,CAAe,CAAf,CAAiB,CAAjB,CAAmBlB,KAAnB,CAAyBQ,WAAzB,EACA,KAAKU,SAAL,CAAe,CAAC,CAAhB,CAAkB,CAAlB,CAAoBlB,KAApB,CAA0BQ,WAA1B,EACA,KAAKU,SAAL,CAAe,CAAf,CAAiB,CAAjB,CAAmBlB,KAAnB,CAAyBQ,WAAzB,EACA,KAAKU,SAAL,CAAe,CAAf,CAAiB,CAAC,CAAlB,CAAoBlB,KAApB,CAA0BQ,WAA1B,EACA,KAAKU,SAAL,CAAe,CAAf,CAAiB,CAAjB,CAAmBlB,KAAnB,CAAyBQ,WAAzB,EACA,KAAKU,SAAL,CAAe,CAAC,CAAhB,CAAkB,CAAC,CAAnB,CAAqBlB,KAArB,CAA2BQ,WAA3B,EACA,KAAKU,SAAL,CAAe,CAAC,CAAhB,CAAkB,CAAlB,CAAoBlB,KAApB,CAA0BQ,WAA1B,EACA,KAAKU,SAAL,CAAe,CAAf,CAAiB,CAAC,CAAlB,CAAoBlB,KAApB,CAA0BQ,WAA1B,EACA,MAAOA,CAAAA,WAAP,CACH,CAbL,iDAcmB,CACX,MAAO,IAAIQ,CAAAA,KAAJ,CAAU,KAAK3B,IAAf,CAAoB,KAAKC,IAAzB,CAA8B,KAAKC,KAAnC,CAAP,CACH,CAhBL,mBAA2BH,KAA3B,EAmBA,UAAagC,CAAAA,IAAb,2NACUhB,WADV,CACsBX,IADtB,CAC4B,CACpB,GAAI,CAAC,KAAKD,KAAV,CAAiB,CACb,GAAIY,WAAW,CAAC,CAAD,CAAX,GAAmB,CAAvB,CAA0B,CACtBX,IAAI,CAACO,KAAL,CAAW,KAAKX,IAAL,CAAU,CAAV,CAAX,EAAyB,CAAzB,EAA4BY,IAA5B,CAAiC,CAAC,KAAKZ,IAAL,CAAU,CAAV,CAAD,CAAc,CAAd,CAAjC,CAAkDI,IAAlD,EACH,CACD,GAAIW,WAAW,CAAC,CAAD,CAAX,GAAmB,CAAvB,CAA0B,CACtBX,IAAI,CAACO,KAAL,CAAW,KAAKX,IAAL,CAAU,CAAV,CAAX,EAAyB,CAAzB,EAA4BY,IAA5B,CAAiC,CAAC,KAAKZ,IAAL,CAAU,CAAV,CAAD,CAAc,CAAd,CAAjC,CAAkDI,IAAlD,EACH,CACJ,CACD,4DAAWW,WAAX,CAAuBX,IAAvB,EACH,CAXL,kDAaiBA,IAbjB,CAauB,CACf,GAAMO,CAAAA,KAAK,CAAGP,IAAI,CAACO,KAAnB,CACA,GAAMQ,CAAAA,WAAW,CAAG,EAApB,CACA,GAAMC,CAAAA,GAAG,CAAG,KAAKpB,IAAL,CAAU,CAAV,CAAZ,CACA,GAAMqB,CAAAA,MAAM,CAAG,KAAKrB,IAAL,CAAU,CAAV,CAAf,CACA,GAAMgC,CAAAA,OAAO,CAAG,CAAC,CAACZ,GAAG,CAAG,CAAP,CAASC,MAAT,CAAD,CAAkB,CAACD,GAAG,CAAG,CAAP,CAASC,MAAM,CAAG,CAAlB,CAAlB,CAChB,CAACD,GAAD,CAAKC,MAAM,CAAG,CAAd,CADgB,CACC,CAACD,GAAG,CAAG,CAAP,CAASC,MAAM,CAAG,CAAlB,CADD,CACsB,CAACD,GAAG,CAAG,CAAP,CAASC,MAAT,CADtB,CAEhB,CAACD,GAAG,CAAE,CAAN,CAASC,MAAM,CAAE,CAAjB,CAFgB,CAEI,CAACD,GAAD,CAAKC,MAAM,CAAG,CAAd,CAFJ,CAEqB,CAACD,GAAG,CAAG,CAAP,CAASC,MAAM,CAAE,CAAjB,CAFrB,CAAhB,CAIA,GAAIZ,CAAAA,MAAJ,CACA,IAAK,GAAIF,CAAAA,KAAK,CAAG,CAAjB,CAAoBA,KAAK,CAAGyB,OAAO,CAACxB,MAApC,CAA4CD,KAAK,EAAjD,CAAqD,CACjDE,MAAM,CAAGuB,OAAO,CAACzB,KAAD,CAAhB,CACA,GAAI,CAAC,KAAKgB,YAAL,CAAkBd,MAAM,CAAC,CAAD,CAAxB,CAA4BA,MAAM,CAAC,CAAD,CAAlC,CAAsCE,KAAtC,CAA4CQ,WAA5C,CAAL,CAA8D,CAC1D,KAAKK,eAAL,CAAqBf,MAAM,CAAC,CAAD,CAA3B,CAA+BA,MAAM,CAAC,CAAD,CAArC,CAAyCE,KAAzC,CAA+CQ,WAA/C,EACH,CACJ,CAED,GAAMc,CAAAA,MAAM,CAAG,CAAC,CAAC,KAAKjC,IAAL,CAAU,CAAV,CAAD,CAAc,CAAd,CAAD,CAAkB,CAAC,KAAKA,IAAL,CAAU,CAAV,CAAD,CAAc,CAAd,CAAlB,CAAmC,CAAC,KAAKA,IAAL,CAAU,CAAV,CAAD,CAAc,CAAd,CAAnC,CAAf,CACA,GAAMkC,CAAAA,MAAM,CAAG,CAAC,CAAC,KAAKlC,IAAL,CAAU,CAAV,CAAD,CAAc,CAAd,CAAD,CAAkB,CAAC,KAAKA,IAAL,CAAU,CAAV,CAAD,CAAc,CAAd,CAAlB,CAAf,CACA,GAAG,CACC,GAAI,KAAKmC,MAAL,CAAY/B,IAAZ,CAAiB6B,MAAjB,CAAyB7B,IAAI,CAACO,KAAL,CAAW,KAAKX,IAAL,CAAU,CAAV,CAAX,EAAyB,CAAzB,CAAzB,CAAJ,CAA2D,CACvDmB,WAAW,CAACL,IAAZ,CAAiB,CAAC,KAAKd,IAAL,CAAU,CAAV,CAAD,CAAc,CAAd,CAAjB,EACH,CACD,GAAI,KAAKmC,MAAL,CAAY/B,IAAZ,CAAiB8B,MAAjB,CAAyB9B,IAAI,CAACO,KAAL,CAAW,KAAKX,IAAL,CAAU,CAAV,CAAX,EAAyB,CAAzB,CAAzB,CAAJ,CAA2D,CACvDmB,WAAW,CAACL,IAAZ,CAAiB,CAAC,KAAKd,IAAL,CAAU,CAAV,CAAD,CAAc,CAAd,CAAjB,EACH,CACJ,CACD,eAAK,CAAE,CACP,MAAOmB,CAAAA,WAAP,CACH,CA1CL,sCA4CYf,IA5CZ,CA4CiBgC,KA5CjB,CA4CuBC,IA5CvB,CA4C6B,CACrB,GAAI,CAAC,KAAKlC,KAAN,EAAe,CAACkC,IAAI,CAAClC,KAAzB,CAAgC,CAC5B,IAAK,GAAImC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,KAAK,CAAC5B,MAA1B,CAAkC8B,CAAC,EAAnC,CAAuC,CACnC,GAAMC,CAAAA,MAAM,CAAGH,KAAK,CAACE,CAAD,CAApB,CACA,GAAIlC,IAAI,CAACO,KAAL,CAAW4B,MAAM,CAAC,CAAD,CAAjB,EAAsBA,MAAM,CAAC,CAAD,CAA5B,EAAiCrC,KAAjC,GAA2C,GAA/C,CAAoD,CAChD,MAAO,MAAP,CACH,CACD,GAAMQ,CAAAA,QAAQ,CAAG,GAAIZ,CAAAA,SAAJ,CAAcM,IAAd,CAAjB,CACAM,QAAQ,CAACC,KAAT,CAAe,KAAKX,IAAL,CAAU,CAAV,CAAf,EAA6B,KAAKA,IAAL,CAAU,CAAV,CAA7B,EAA2CY,IAA3C,CAAgD2B,MAAhD,CAAuD7B,QAAvD,EACA,GAAIA,QAAQ,CAACG,OAAT,EAAJ,CAAwB,CACpB,MAAO,MAAP,CACH,CACJ,CACJ,CAZD,IAaK,CACD,MAAO,MAAP,CACH,CACD,MAAO,KAAP,CACH,CA9DL,iDAgEmB,CACX,MAAO,IAAIkB,CAAAA,IAAJ,CAAS,KAAK/B,IAAd,CAAmB,KAAKC,IAAxB,CAA6B,KAAKC,KAAlC,CAAP,CACH,CAlEL,kBAA0BH,KAA1B,EAqEA,UAAayC,CAAAA,MAAb,qPACiBpC,IADjB,CACuB,CACf,GAAMO,CAAAA,KAAK,CAAGP,IAAI,CAACO,KAAnB,CACA,GAAMQ,CAAAA,WAAW,CAAG,EAApB,CACA,GAAMC,CAAAA,GAAG,CAAG,KAAKpB,IAAL,CAAU,CAAV,CAAZ,CACA,GAAMqB,CAAAA,MAAM,CAAG,KAAKrB,IAAL,CAAU,CAAV,CAAf,CAEA,GAAMgC,CAAAA,OAAO,CAAG,CAAC,CAACZ,GAAG,CAAG,CAAP,CAASC,MAAM,CAAG,CAAlB,CAAD,CAAsB,CAACD,GAAG,CAAG,CAAP,CAASC,MAAM,CAAG,CAAlB,CAAtB,CAChB,CAACD,GAAG,CAAG,CAAP,CAASC,MAAM,CAAG,CAAlB,CADgB,CACK,CAACD,GAAG,CAAG,CAAP,CAASC,MAAM,CAAG,CAAlB,CADL,CAC0B,CAACD,GAAG,CAAG,CAAP,CAASC,MAAM,CAAG,CAAlB,CAD1B,CAEhB,CAACD,GAAG,CAAG,CAAP,CAAUC,MAAM,CAAG,CAAnB,CAFgB,CAEM,CAACD,GAAG,CAAG,CAAP,CAASC,MAAM,CAAG,CAAlB,CAFN,CAE2B,CAACD,GAAG,CAAG,CAAP,CAASC,MAAM,CAAE,CAAjB,CAF3B,CAAhB,CAGA,GAAIZ,CAAAA,MAAJ,CACA,IAAK,GAAIF,CAAAA,KAAK,CAAG,CAAjB,CAAoBA,KAAK,CAAGyB,OAAO,CAACxB,MAApC,CAA4CD,KAAK,EAAjD,CAAqD,CACjDE,MAAM,CAAGuB,OAAO,CAACzB,KAAD,CAAhB,CACA,GAAI,CAAC,KAAKgB,YAAL,CAAkBd,MAAM,CAAC,CAAD,CAAxB,CAA4BA,MAAM,CAAC,CAAD,CAAlC,CAAsCE,KAAtC,CAA4CQ,WAA5C,CAAL,CAA8D,CAC1D,KAAKK,eAAL,CAAqBf,MAAM,CAAC,CAAD,CAA3B,CAA+BA,MAAM,CAAC,CAAD,CAArC,CAAyCE,KAAzC,CAA+CQ,WAA/C,EACH,CACJ,CACD,MAAOA,CAAAA,WAAP,CACH,CAlBL,iDAoBmB,CACX,MAAO,IAAIqB,CAAAA,MAAJ,CAAW,KAAKxC,IAAhB,CAAqB,KAAKC,IAA1B,CAA+B,KAAKC,KAApC,CAAP,CACH,CAtBL,oBAA4BH,KAA5B","sourcesContent":["import { get_opp_color } from \"./Methods\";\r\nimport {Copy_Game} from \"./Game\"\r\n\r\n\r\nexport class Piece {\r\n    constructor (spot,lett,color){\r\n        this.spot = spot\r\n        this.lett = lett\r\n        this.color = color\r\n        this.moved = false\r\n    }\r\n\r\n    move_options() {\r\n        return []\r\n    }\r\n\r\n    getAvaliableMoves(game) {\r\n        const move_options = this.move_options(game)\r\n        let newMoveOptions = []\r\n        for (let index = 0; index < move_options.length; index++) {\r\n            const option = move_options[index];\r\n            const copyGame = new Copy_Game(game)\r\n            copyGame.board[this.spot[0]][this.spot[1]].move(option,copyGame)\r\n            if (!copyGame.isCheck()) {\r\n                newMoveOptions.push(option)\r\n            }\r\n        }\r\n        return newMoveOptions\r\n    }\r\n\r\n    move (chosen_spot,game){\r\n        game.update(chosen_spot,this)\r\n        this.spot = chosen_spot\r\n        if (!this.moved) {\r\n            this.moved = true\r\n        }\r\n    }\r\n    \r\n    check_dir (rowDir,columnDir,board,option_list) {\r\n        let row = this.spot[0]\r\n        let column = this.spot[1]\r\n        let blocked = false\r\n        while (!blocked) {\r\n            row += rowDir\r\n            column += columnDir\r\n            if (!this.is_spot_free(row ,column, board, option_list)){\r\n                blocked = true;\r\n                this.is_spot_eatable(row, column, board, option_list);\r\n            }\r\n        }\r\n    }\r\n\r\n    create_copy () {\r\n        return new Piece(this.spot,this.lett,this.color)\r\n    }\r\n    \r\n    is_spot_free(row,column,board,move_option) {\r\n        try {\r\n            if (board[row][column].color === \"e\"){\r\n                move_option.push([row,column])\r\n                return true;\r\n            }\r\n            else{\r\n                return false;\r\n            }\r\n        }\r\n        catch {}\r\n    }\r\n\r\n    is_spot_eatable(row,column,board,move_option) {\r\n        try{\r\n            if (board[row][column].color === get_opp_color(this.color)){\r\n                move_option.push([row,column])\r\n            }\r\n        }\r\n        catch {}\r\n    }\r\n}\r\n\r\nexport class Pawn extends Piece{\r\n    move (chosen_spot,game) {\r\n        super.move(chosen_spot,game)\r\n        if (this.spot[0] === 0 || this.spot[0] === 7) {\r\n            game.board[this.spot[0]][this.spot[1]] = new Queen(this.spot,'Q',this.color)\r\n        }\r\n    }\r\n\r\n    move_options(game) {\r\n        const board = game.board\r\n        const row = this.spot[0]\r\n        const column = this.spot[1]\r\n        const move_options = []\r\n        if  (this.color === \"w\"){\r\n            this.is_spot_free(row - 1, column,board,move_options)\r\n            if (!this.moved){\r\n                this.is_spot_free(row - 2,column,board,move_options)\r\n            } \r\n            this.is_spot_eatable(row - 1, column + 1,board,move_options)\r\n            this.is_spot_eatable(row - 1, column - 1,board,move_options)\r\n        }\r\n        else {\r\n            this.is_spot_free(row + 1, column,board,move_options)\r\n            if (!this.moved){\r\n                this.is_spot_free(row + 2,column,board,move_options)\r\n            }\r\n            this.is_spot_eatable(row + 1, column + 1,board,move_options)\r\n            this.is_spot_eatable(row + 1, column - 1,board,move_options)\r\n        }\r\n        return move_options;\r\n    }\r\n\r\n    create_copy () {\r\n        return new Pawn(this.spot,this.lett,this.color)\r\n    }\r\n}\r\n\r\nexport class Rook extends Piece{\r\n    move_options(game) {\r\n        const board = game.board\r\n        const option_list = [];\r\n        this.check_dir(1,0,board,option_list)\r\n        this.check_dir(-1,0,board,option_list)\r\n        this.check_dir(0,1,board,option_list)\r\n        this.check_dir(0,-1,board,option_list)\r\n        return option_list\r\n    }\r\n    create_copy () {\r\n        return new Rook(this.spot,this.lett,this.color)\r\n    }\r\n}\r\n\r\nexport class Bishop extends Piece{\r\n    move_options(game) {\r\n        const board = game.board\r\n        const option_list = [];\r\n        this.check_dir(1,1,board,option_list)\r\n        this.check_dir(-1,-1,board,option_list)\r\n        this.check_dir(-1,1,board,option_list)\r\n        this.check_dir(1,-1,board,option_list)\r\n        return option_list\r\n    }\r\n    create_copy () {\r\n        return new Bishop(this.spot,this.lett,this.color)\r\n    }\r\n}\r\n\r\nexport class Queen extends Piece {\r\n    move_options(game) {\r\n        const board = game.board\r\n        let option_list = []\r\n        this.check_dir(1,0,board,option_list)\r\n        this.check_dir(-1,0,board,option_list)\r\n        this.check_dir(0,1,board,option_list)\r\n        this.check_dir(0,-1,board,option_list)\r\n        this.check_dir(1,1,board,option_list)\r\n        this.check_dir(-1,-1,board,option_list)\r\n        this.check_dir(-1,1,board,option_list)\r\n        this.check_dir(1,-1,board,option_list)\r\n        return option_list\r\n    }\r\n    create_copy () {\r\n        return new Queen(this.spot,this.lett,this.color)\r\n    }\r\n}\r\n\r\nexport class King extends Piece {\r\n    move (chosen_spot,game) {\r\n        if (!this.moved) {\r\n            if (chosen_spot[1] === 2) {\r\n                game.board[this.spot[0]][0].move([this.spot[0],3],game)\r\n            }\r\n            if (chosen_spot[1] === 6) {\r\n                game.board[this.spot[0]][7].move([this.spot[0],5],game)\r\n            }\r\n        }\r\n        super.move(chosen_spot,game)\r\n    }\r\n\r\n    move_options(game) {\r\n        const board = game.board\r\n        const option_list = []\r\n        const row = this.spot[0]\r\n        const column = this.spot[1]\r\n        const options = [[row + 1,column],[row + 1,column + 1],\r\n        [row,column + 1],[row - 1,column + 1],[row - 1,column],\r\n        [row -1 ,column -1],[row,column - 1],[row + 1,column -1]]\r\n\r\n        let option\r\n        for (let index = 0; index < options.length; index++) {\r\n            option = options[index]\r\n            if (!this.is_spot_free(option[0],option[1],board,option_list)){\r\n                this.is_spot_eatable(option[0],option[1],board,option_list)\r\n            }\r\n        }\r\n        \r\n        const route1 = [[this.spot[0],3],[this.spot[0],2],[this.spot[0],1]]\r\n        const route2 = [[this.spot[0],5],[this.spot[0],6]]\r\n        try{\r\n            if (this.castle(game,route1, game.board[this.spot[0]][0])) {\r\n                option_list.push([this.spot[0],2])\r\n            }\r\n            if (this.castle(game,route2, game.board[this.spot[0]][7])) {\r\n                option_list.push([this.spot[0],6])\r\n            }\r\n        }\r\n        catch{}\r\n        return option_list\r\n    }\r\n\r\n    castle (game,route,rook) {\r\n        if (!this.moved && !rook.moved) {\r\n            for (let i = 0; i < route.length; i++) {\r\n                const square = route[i];\r\n                if (game.board[square[0]][square[1]].color !== 'e') {\r\n                    return false\r\n                }\r\n                const copyGame = new Copy_Game(game)\r\n                copyGame.board[this.spot[0]][this.spot[1]].move(square,copyGame)\r\n                if (copyGame.isCheck()) {\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return false\r\n        } \r\n        return true\r\n    }\r\n\r\n    create_copy () {\r\n        return new King(this.spot,this.lett,this.color)\r\n    }\r\n}\r\n\r\nexport class Knight extends Piece {\r\n    move_options(game) {\r\n        const board = game.board\r\n        const option_list = []\r\n        const row = this.spot[0]\r\n        const column = this.spot[1]\r\n\r\n        const options = [[row + 2,column + 1],[row + 2,column - 1],\r\n        [row - 1,column + 2],[row - 2,column + 1],[row - 2,column - 1],\r\n        [row + 1 ,column + 2],[row + 1,column - 2],[row - 1,column -2]]\r\n        let option\r\n        for (let index = 0; index < options.length; index++) {\r\n            option = options[index]\r\n            if (!this.is_spot_free(option[0],option[1],board,option_list)){\r\n                this.is_spot_eatable(option[0],option[1],board,option_list)\r\n            }\r\n        }\r\n        return option_list\r\n    }\r\n\r\n    create_copy () {\r\n        return new Knight(this.spot,this.lett,this.color)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}