{"ast":null,"code":"import { get_opp_color } from \"./Methods\";\nimport { Copy_Game } from \"./Game\";\nexport class Piece {\n  constructor(spot, lett, color) {\n    this.spot = spot;\n    this.lett = lett;\n    this.color = color;\n    this.moved = false;\n  }\n\n  move_options() {\n    return [];\n  }\n\n  getAvaliableMoves(game) {\n    const move_options = this.move_options(game);\n    let newMoveOptions = [];\n\n    for (let index = 0; index < move_options.length; index++) {\n      const option = move_options[index];\n      const copyGame = new Copy_Game(game);\n      copyGame.board[this.spot[0]][this.spot[1]].move(option, copyGame);\n\n      if (!copyGame.isCheck()) {\n        newMoveOptions.push(option);\n      }\n    }\n\n    return newMoveOptions;\n  }\n\n  move(chosen_spot, game) {\n    game.update(chosen_spot, this);\n    this.spot = chosen_spot;\n\n    if (!this.moved) {\n      this.moved = true;\n    }\n  }\n\n  check_dir(rowDir, columnDir, board, option_list) {\n    let row = this.spot[0];\n    let column = this.spot[1];\n    let blocked = false;\n\n    while (!blocked) {\n      row += rowDir;\n      column += columnDir;\n\n      if (!this.is_spot_free(row, column, board, option_list)) {\n        blocked = true;\n        this.is_spot_eatable(row, column, board, option_list);\n      }\n    }\n  }\n\n  create_copy() {\n    return new Piece(this.spot, this.lett, this.color);\n  }\n\n  is_spot_free(row, column, board, move_option) {\n    try {\n      if (board[row][column].color === \"e\") {\n        move_option.push([row, column]);\n        return true;\n      } else {\n        return false;\n      }\n    } catch {}\n  }\n\n  is_spot_eatable(row, column, board, move_option) {\n    try {\n      if (board[row][column].color === get_opp_color(this.color)) {\n        move_option.push([row, column]);\n      }\n    } catch {}\n  }\n\n}\nexport class Pawn extends Piece {\n  move(chosen_spot, game) {\n    super.move(chosen_spot, game);\n\n    if (this.spot[0] === 0 || this.spot[0] === 7) {\n      game.board[this.spot[0]][this.spot[1]] = new Queen(this.spot, 'Q', this.color);\n    }\n  }\n\n  move_options(game) {\n    const board = game.board;\n    const row = this.spot[0];\n    const column = this.spot[1];\n    const move_options = [];\n\n    if (this.color === \"w\") {\n      this.is_spot_free(row - 1, column, board, move_options);\n\n      if (!this.moved) {\n        this.is_spot_free(row - 2, column, board, move_options);\n      }\n\n      this.is_spot_eatable(row - 1, column + 1, board, move_options);\n      this.is_spot_eatable(row - 1, column - 1, board, move_options);\n    } else {\n      this.is_spot_free(row + 1, column, board, move_options);\n\n      if (!this.moved) {\n        this.is_spot_free(row + 2, column, board, move_options);\n      }\n\n      this.is_spot_eatable(row + 1, column + 1, board, move_options);\n      this.is_spot_eatable(row + 1, column - 1, board, move_options);\n    }\n\n    return move_options;\n  }\n\n  create_copy() {\n    return new Pawn(this.spot, this.lett, this.color);\n  }\n\n}\nexport class Rook extends Piece {\n  move_options(game) {\n    const board = game.board;\n    const option_list = [];\n    this.check_dir(1, 0, board, option_list);\n    this.check_dir(-1, 0, board, option_list);\n    this.check_dir(0, 1, board, option_list);\n    this.check_dir(0, -1, board, option_list);\n    return option_list;\n  }\n\n  create_copy() {\n    return new Rook(this.spot, this.lett, this.color);\n  }\n\n}\nexport class Bishop extends Piece {\n  move_options(game) {\n    const board = game.board;\n    const option_list = [];\n    this.check_dir(1, 1, board, option_list);\n    this.check_dir(-1, -1, board, option_list);\n    this.check_dir(-1, 1, board, option_list);\n    this.check_dir(1, -1, board, option_list);\n    return option_list;\n  }\n\n  create_copy() {\n    return new Bishop(this.spot, this.lett, this.color);\n  }\n\n}\nexport class Queen extends Piece {\n  move_options(game) {\n    const board = game.board;\n    let option_list = [];\n    this.check_dir(1, 0, board, option_list);\n    this.check_dir(-1, 0, board, option_list);\n    this.check_dir(0, 1, board, option_list);\n    this.check_dir(0, -1, board, option_list);\n    this.check_dir(1, 1, board, option_list);\n    this.check_dir(-1, -1, board, option_list);\n    this.check_dir(-1, 1, board, option_list);\n    this.check_dir(1, -1, board, option_list);\n    return option_list;\n  }\n\n  create_copy() {\n    return new Queen(this.spot, this.lett, this.color);\n  }\n\n}\nexport class King extends Piece {\n  move(chosen_spot, game) {\n    if (!this.moved) {\n      if (chosen_spot[1] === 2) {\n        game.update([this.spot[0], 3], game.board[this.spot[0]][0]);\n      }\n\n      if (chosen_spot[1] === 6) {\n        game.update([this.spot[0], 5], game.board[this.spot[0]][7]);\n      }\n\n      console.log(game.board);\n    }\n\n    super.move(chosen_spot, game);\n  }\n\n  move_options(game) {\n    const board = game.board;\n    const option_list = [];\n    const row = this.spot[0];\n    const column = this.spot[1];\n    const options = [[row + 1, column], [row + 1, column + 1], [row, column + 1], [row - 1, column + 1], [row - 1, column], [row - 1, column - 1], [row, column - 1], [row + 1, column - 1]];\n    let option;\n\n    for (let index = 0; index < options.length; index++) {\n      option = options[index];\n\n      if (!this.is_spot_free(option[0], option[1], board, option_list)) {\n        this.is_spot_eatable(option[0], option[1], board, option_list);\n      }\n    }\n\n    const route1 = [[this.spot[0], 3], [this.spot[0], 2], [this.spot[0], 1]];\n    const route2 = [[this.spot[0], 5], [this.spot[0], 6]];\n\n    try {\n      if (this.castle(game, route1, game.board[this.spot[0]][0])) {\n        option_list.push([this.spot[0], 2]);\n      }\n\n      if (this.castle(game, route2, game.board[this.spot[0]][7])) {\n        option_list.push([this.spot[0], 6]);\n      }\n    } catch {}\n\n    return option_list;\n  }\n\n  castle(game, route, rook) {\n    if (game.isCheck()) {\n      return false;\n    } // else {\n    //     if (!this.moved && !rook.moved) {\n    //         for (let i = 0; i < route.length; i++) {\n    //             const square = route[i];\n    //             if (game.board[square[0]][square[1]].color !== 'e') {\n    //                 return false\n    //             }\n    //             // const copyGame = new Copy_Game(game)\n    //             // copyGame.board[this.spot[0]][this.spot[1]].move(square,copyGame)\n    //             // if (copyGame.isCheck()) {\n    //             //     return false\n    //             // }\n    //         }\n    //     }\n    //     else {\n    //         return false\n    //     } \n    // }\n    // return true\n\n\n    if (!this.moved && !rook.moved) {\n      for (let i = 0; i < route.length; i++) {\n        const square = route[i];\n\n        if (game.board[square[0]][square[1]].color !== 'e') {\n          return false;\n        } // const copyGame = new Copy_Game(game)\n        // copyGame.board[this.spot[0]][this.spot[1]].move(square,copyGame)\n        // if (copyGame.isCheck()) {\n        //     return false\n        // }\n\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  create_copy() {\n    return new King(this.spot, this.lett, this.color);\n  }\n\n}\nexport class Knight extends Piece {\n  move_options(game) {\n    const board = game.board;\n    const option_list = [];\n    const row = this.spot[0];\n    const column = this.spot[1];\n    const options = [[row + 2, column + 1], [row + 2, column - 1], [row - 1, column + 2], [row - 2, column + 1], [row - 2, column - 1], [row + 1, column + 2], [row + 1, column - 2], [row - 1, column - 2]];\n    let option;\n\n    for (let index = 0; index < options.length; index++) {\n      option = options[index];\n\n      if (!this.is_spot_free(option[0], option[1], board, option_list)) {\n        this.is_spot_eatable(option[0], option[1], board, option_list);\n      }\n    }\n\n    return option_list;\n  }\n\n  create_copy() {\n    return new Knight(this.spot, this.lett, this.color);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/Computer_Science/ChessWeb1/src/Components/pieces.js"],"names":["get_opp_color","Copy_Game","Piece","constructor","spot","lett","color","moved","move_options","getAvaliableMoves","game","newMoveOptions","index","length","option","copyGame","board","move","isCheck","push","chosen_spot","update","check_dir","rowDir","columnDir","option_list","row","column","blocked","is_spot_free","is_spot_eatable","create_copy","move_option","Pawn","Queen","Rook","Bishop","King","console","log","options","route1","route2","castle","route","rook","i","square","Knight"],"mappings":"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","sourcesContent":["import { get_opp_color } from \"./Methods\";\r\nimport {Copy_Game} from \"./Game\"\r\n\r\n\r\nexport class Piece {\r\n    constructor (spot,lett,color){\r\n        this.spot = spot\r\n        this.lett = lett\r\n        this.color = color\r\n        this.moved = false\r\n    }\r\n\r\n    move_options() {\r\n        return []\r\n    }\r\n\r\n    getAvaliableMoves(game) {\r\n        const move_options = this.move_options(game)\r\n        let newMoveOptions = []\r\n        for (let index = 0; index < move_options.length; index++) {\r\n            const option = move_options[index];\r\n            const copyGame = new Copy_Game(game)\r\n            copyGame.board[this.spot[0]][this.spot[1]].move(option,copyGame)\r\n            if (!copyGame.isCheck()) {\r\n                newMoveOptions.push(option)\r\n            }\r\n        }\r\n        return newMoveOptions\r\n    }\r\n\r\n    move (chosen_spot,game){\r\n        game.update(chosen_spot,this)\r\n        this.spot = chosen_spot\r\n        if (!this.moved) {\r\n            this.moved = true\r\n        }\r\n    }\r\n    \r\n    check_dir (rowDir,columnDir,board,option_list) {\r\n        let row = this.spot[0]\r\n        let column = this.spot[1]\r\n        let blocked = false\r\n        while (!blocked) {\r\n            row += rowDir\r\n            column += columnDir\r\n            if (!this.is_spot_free(row ,column, board, option_list)){\r\n                blocked = true;\r\n                this.is_spot_eatable(row, column, board, option_list);\r\n            }\r\n        }\r\n    }\r\n\r\n    create_copy () {\r\n        return new Piece(this.spot,this.lett,this.color)\r\n    }\r\n    \r\n    is_spot_free(row,column,board,move_option) {\r\n        try {\r\n            if (board[row][column].color === \"e\"){\r\n                move_option.push([row,column])\r\n                return true;\r\n            }\r\n            else{\r\n                return false;\r\n            }\r\n        }\r\n        catch {}\r\n    }\r\n\r\n    is_spot_eatable(row,column,board,move_option) {\r\n        try{\r\n            if (board[row][column].color === get_opp_color(this.color)){\r\n                move_option.push([row,column])\r\n            }\r\n        }\r\n        catch {}\r\n    }\r\n}\r\n\r\nexport class Pawn extends Piece{\r\n    move (chosen_spot,game) {\r\n        super.move(chosen_spot,game)\r\n        if (this.spot[0] === 0 || this.spot[0] === 7) {\r\n            game.board[this.spot[0]][this.spot[1]] = new Queen(this.spot,'Q',this.color)\r\n        }\r\n    }\r\n\r\n    move_options(game) {\r\n        const board = game.board\r\n        const row = this.spot[0]\r\n        const column = this.spot[1]\r\n        const move_options = []\r\n        if  (this.color === \"w\"){\r\n            this.is_spot_free(row - 1, column,board,move_options)\r\n            if (!this.moved){\r\n                this.is_spot_free(row - 2,column,board,move_options)\r\n            } \r\n            this.is_spot_eatable(row - 1, column + 1,board,move_options)\r\n            this.is_spot_eatable(row - 1, column - 1,board,move_options)\r\n        }\r\n        else {\r\n            this.is_spot_free(row + 1, column,board,move_options)\r\n            if (!this.moved){\r\n                this.is_spot_free(row + 2,column,board,move_options)\r\n            }\r\n            this.is_spot_eatable(row + 1, column + 1,board,move_options)\r\n            this.is_spot_eatable(row + 1, column - 1,board,move_options)\r\n        }\r\n        return move_options;\r\n    }\r\n\r\n    create_copy () {\r\n        return new Pawn(this.spot,this.lett,this.color)\r\n    }\r\n}\r\n\r\nexport class Rook extends Piece{\r\n    move_options(game) {\r\n        const board = game.board\r\n        const option_list = [];\r\n        this.check_dir(1,0,board,option_list)\r\n        this.check_dir(-1,0,board,option_list)\r\n        this.check_dir(0,1,board,option_list)\r\n        this.check_dir(0,-1,board,option_list)\r\n        return option_list\r\n    }\r\n    create_copy () {\r\n        return new Rook(this.spot,this.lett,this.color)\r\n    }\r\n}\r\n\r\nexport class Bishop extends Piece{\r\n    move_options(game) {\r\n        const board = game.board\r\n        const option_list = [];\r\n        this.check_dir(1,1,board,option_list)\r\n        this.check_dir(-1,-1,board,option_list)\r\n        this.check_dir(-1,1,board,option_list)\r\n        this.check_dir(1,-1,board,option_list)\r\n        return option_list\r\n    }\r\n    create_copy () {\r\n        return new Bishop(this.spot,this.lett,this.color)\r\n    }\r\n}\r\n\r\nexport class Queen extends Piece {\r\n    move_options(game) {\r\n        const board = game.board\r\n        let option_list = []\r\n        this.check_dir(1,0,board,option_list)\r\n        this.check_dir(-1,0,board,option_list)\r\n        this.check_dir(0,1,board,option_list)\r\n        this.check_dir(0,-1,board,option_list)\r\n        this.check_dir(1,1,board,option_list)\r\n        this.check_dir(-1,-1,board,option_list)\r\n        this.check_dir(-1,1,board,option_list)\r\n        this.check_dir(1,-1,board,option_list)\r\n        return option_list\r\n    }\r\n    create_copy () {\r\n        return new Queen(this.spot,this.lett,this.color)\r\n    }\r\n}\r\n\r\nexport class King extends Piece {\r\n    move (chosen_spot,game) {\r\n\r\n        if (!this.moved) {\r\n            if (chosen_spot[1] === 2) {\r\n                game.update([this.spot[0],3],game.board[this.spot[0]][0])\r\n            }\r\n            \r\n            if (chosen_spot[1] === 6) {\r\n                game.update([this.spot[0],5],game.board[this.spot[0]][7])\r\n            }\r\n            console.log(game.board)\r\n        }\r\n        super.move(chosen_spot,game)\r\n    }\r\n\r\n    move_options(game) {\r\n        const board = game.board\r\n        const option_list = []\r\n        const row = this.spot[0]\r\n        const column = this.spot[1]\r\n        const options = [[row + 1,column],[row + 1,column + 1],\r\n        [row,column + 1],[row - 1,column + 1],[row - 1,column],\r\n        [row -1 ,column -1],[row,column - 1],[row + 1,column -1]]\r\n\r\n        let option\r\n        for (let index = 0; index < options.length; index++) {\r\n            option = options[index]\r\n            if (!this.is_spot_free(option[0],option[1],board,option_list)){\r\n                this.is_spot_eatable(option[0],option[1],board,option_list)\r\n            }\r\n        }\r\n        \r\n        const route1 = [[this.spot[0],3],[this.spot[0],2],[this.spot[0],1]]\r\n        const route2 = [[this.spot[0],5],[this.spot[0],6]]\r\n        try{\r\n            if (this.castle(game,route1, game.board[this.spot[0]][0])) {\r\n                option_list.push([this.spot[0],2])\r\n            }\r\n            if (this.castle(game,route2, game.board[this.spot[0]][7])) {\r\n                option_list.push([this.spot[0],6])\r\n            }\r\n        }\r\n        catch{}\r\n        return option_list\r\n    }\r\n\r\n    castle (game,route,rook) {\r\n        \r\n        if (game.isCheck()) {\r\n            return false\r\n        }\r\n        // else {\r\n        //     if (!this.moved && !rook.moved) {\r\n        //         for (let i = 0; i < route.length; i++) {\r\n        //             const square = route[i];\r\n        //             if (game.board[square[0]][square[1]].color !== 'e') {\r\n        //                 return false\r\n        //             }\r\n        //             // const copyGame = new Copy_Game(game)\r\n        //             // copyGame.board[this.spot[0]][this.spot[1]].move(square,copyGame)\r\n        //             // if (copyGame.isCheck()) {\r\n        //             //     return false\r\n        //             // }\r\n        //         }\r\n        //     }\r\n        //     else {\r\n        //         return false\r\n        //     } \r\n        // }\r\n        // return true\r\n        if (!this.moved && !rook.moved) {\r\n            for (let i = 0; i < route.length; i++) {\r\n                const square = route[i];\r\n                if (game.board[square[0]][square[1]].color !== 'e') {\r\n                    return false\r\n                }\r\n                // const copyGame = new Copy_Game(game)\r\n                // copyGame.board[this.spot[0]][this.spot[1]].move(square,copyGame)\r\n                // if (copyGame.isCheck()) {\r\n                //     return false\r\n                // }\r\n                }\r\n            }\r\n            else {\r\n                return false\r\n            } \r\n        return true\r\n    }\r\n\r\n    create_copy () {\r\n        return new King(this.spot,this.lett,this.color)\r\n    }\r\n}\r\n\r\nexport class Knight extends Piece {\r\n    move_options(game) {\r\n        const board = game.board\r\n        const option_list = []\r\n        const row = this.spot[0]\r\n        const column = this.spot[1]\r\n\r\n        const options = [[row + 2,column + 1],[row + 2,column - 1],\r\n        [row - 1,column + 2],[row - 2,column + 1],[row - 2,column - 1],\r\n        [row + 1 ,column + 2],[row + 1,column - 2],[row - 1,column -2]]\r\n        let option\r\n        for (let index = 0; index < options.length; index++) {\r\n            option = options[index]\r\n            if (!this.is_spot_free(option[0],option[1],board,option_list)){\r\n                this.is_spot_eatable(option[0],option[1],board,option_list)\r\n            }\r\n        }\r\n        return option_list\r\n    }\r\n\r\n    create_copy () {\r\n        return new Knight(this.spot,this.lett,this.color)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}