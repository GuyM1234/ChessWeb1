{"ast":null,"code":"import _inherits from\"C:/Users/user/Desktop/Computer_Science/ChessWeb1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/user/Desktop/Computer_Science/ChessWeb1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _classCallCheck from\"C:/Users/user/Desktop/Computer_Science/ChessWeb1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/user/Desktop/Computer_Science/ChessWeb1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import{Piece,Pawn,Rook,Bishop,Queen,King,Knight}from\"./pieces\";import SpotInOptions from\"./Methods\";export var Game=/*#__PURE__*/function(){function Game(){_classCallCheck(this,Game);this.turn='w';this.whiteKing=new King([7,4],'K','w');this.blackKing=new King([0,4],'K','b');this.board=this.createBoard();}_createClass(Game,[{key:\"createBoard\",value:function createBoard(){var board=[];for(var rowindex=0;rowindex<8;rowindex++){var row=[];for(var columnindex=0;columnindex<8;columnindex++){var p=new Piece([rowindex,columnindex],'0','e',\"\");row.push(p);}board.push(row);}board[6]=board[6].map(function(x,index){return new Pawn([6,index],'P','w');});board[1]=board[1].map(function(x,index){return new Pawn([1,index],'P','b');});board[7][4]=this.whiteKing;board[0][4]=this.blackKing;board[7][3]=new Queen([7,3],'Q','w');board[0][3]=new Queen([0,3],'Q','b');board[7][0]=new Rook([7,0],'R','w');board[7][7]=new Rook([7,7],'R','w');board[0][0]=new Rook([0,0],'R','b');board[0][7]=new Rook([0,7],'R','b');board[7][2]=new Bishop([7,2],'B','w');board[7][5]=new Bishop([7,5],'B','w');board[0][2]=new Bishop([0,2],'B','b');board[0][5]=new Bishop([0,5],'B','b');board[7][1]=new Knight([7,1],'k','w');board[7][6]=new Knight([7,6],'k','w');board[0][1]=new Knight([0,1],'k','b');board[0][6]=new Knight([0,6],'k','b');return board;}},{key:\"update\",value:function update(chosen_spot,piece){this.board[chosen_spot[0]][chosen_spot[1]]=piece;this.board[piece.spot[0]][piece.spot[1]]=new Piece(piece.spot,'0','e');}},{key:\"updateTurn\",value:function updateTurn(){if(this.turn==='w'){this.turn='b';}else{this.turn='w';}}},{key:\"isCheck\",value:function isCheck(){for(var row=0;row<this.board.length;row++){for(var column=0;column<this.board[row].length;column++){var piece=this.board[row][column];if(piece.lett!=='K'){var move_options=piece.move_options(this);if(this.turn==='w'){if(SpotInOptions(this.whiteKing.spot,move_options)){return true;}}else if(SpotInOptions(this.blackKing.spot,move_options)){return true;}}}}return false;}},{key:\"isCheckMate\",value:function isCheckMate(){for(var row=0;row<this.board.length;row++){for(var column=0;column<this.board[row].length;column++){var piece=this.board[row][column];if(piece.color===this.turn){var move_options=piece.getAvaliableMoves(this);if(move_options.length>0){return false;}}}}return true;}},{key:\"isPat\",value:function isPat(){return this.isCheckMate();}}]);return Game;}();export var Copy_Game=/*#__PURE__*/function(_Game){_inherits(Copy_Game,_Game);var _super=_createSuper(Copy_Game);function Copy_Game(game){var _this;_classCallCheck(this,Copy_Game);_this=_super.call(this);_this.turn=game.turn;_this.board=_this.createCopyBoard(game.board);_this.whiteKing=_this.board[game.whiteKing.spot[0]][game.whiteKing.spot[1]];_this.blackKing=_this.board[game.blackKing.spot[0]][game.blackKing.spot[1]];return _this;}_createClass(Copy_Game,[{key:\"createCopyBoard\",value:function createCopyBoard(board){var copy_board=[];for(var rowindex=0;rowindex<8;rowindex++){var row=[];for(var columnindex=0;columnindex<8;columnindex++){var p=board[rowindex][columnindex].create_copy();row.push(p);}copy_board.push(row);}return copy_board;}}]);return Copy_Game;}(Game);","map":{"version":3,"sources":["C:/Users/user/Desktop/Computer_Science/ChessWeb1/src/Components/Game.js"],"names":["Piece","Pawn","Rook","Bishop","Queen","King","Knight","SpotInOptions","Game","turn","whiteKing","blackKing","board","createBoard","rowindex","row","columnindex","p","push","map","x","index","chosen_spot","piece","spot","length","column","lett","move_options","color","getAvaliableMoves","isCheckMate","Copy_Game","game","createCopyBoard","copy_board","create_copy"],"mappings":"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","sourcesContent":["import { Piece, Pawn, Rook, Bishop, Queen, King, Knight} from \"./pieces\"\r\nimport SpotInOptions from \"./Methods\"\r\n\r\nexport class Game {\r\n    constructor() {\r\n        this.turn = 'w'\r\n        this.whiteKing = new King([7,4],'K','w')\r\n        this.blackKing = new King([0,4],'K','b')\r\n        this.board = this.createBoard()\r\n    }\r\n\r\n    createBoard () {\r\n        const board = []\r\n        for (let rowindex = 0; rowindex < 8; rowindex++) {\r\n            const row = []\r\n            for (let columnindex = 0; columnindex < 8; columnindex++) {\r\n                let p = new Piece([rowindex,columnindex],'0','e',\"\")\r\n                row.push(p);\r\n            }\r\n            board.push(row)\r\n        }\r\n        board[6] = board[6].map((x,index) => new Pawn([6,index],'P','w'))\r\n        board[1] = board[1].map((x,index) => new Pawn([1,index],'P','b'))\r\n        board[7][4] = this.whiteKing\r\n        board[0][4] = this.blackKing\r\n        board[7][3] = new Queen([7,3],'Q','w')\r\n        board[0][3] = new Queen([0,3],'Q','b')\r\n        board[7][0] = new Rook([7,0],'R','w')\r\n        board[7][7] = new Rook([7,7],'R','w')\r\n        board[0][0] = new Rook([0,0],'R','b')\r\n        board[0][7] = new Rook([0,7],'R','b')\r\n        board[7][2] = new Bishop([7,2],'B','w')\r\n        board[7][5] = new Bishop([7,5],'B','w')\r\n        board[0][2] = new Bishop([0,2],'B','b')\r\n        board[0][5] = new Bishop([0,5],'B','b')\r\n        board[7][1] = new Knight([7,1],'k','w')\r\n        board[7][6] = new Knight([7,6],'k','w')\r\n        board[0][1] = new Knight([0,1],'k','b')\r\n        board[0][6] = new Knight([0,6],'k','b')\r\n        return board;\r\n    } \r\n    \r\n    update (chosen_spot, piece) {\r\n        this.board[chosen_spot[0]][chosen_spot[1]] = piece;\r\n        this.board[piece.spot[0]][piece.spot[1]] = new Piece(piece.spot,'0','e');\r\n    }\r\n\r\n    updateTurn () {\r\n        if (this.turn === 'w'){\r\n            this.turn = 'b'\r\n        } else{\r\n            this.turn = 'w'\r\n        }\r\n    }\r\n\r\n    isCheck () {\r\n        for (let row = 0; row < this.board.length; row++) {\r\n            for (let column = 0; column < this.board[row].length; column++) {\r\n                const piece = this.board[row][column]\r\n                if (piece.lett !== 'K') {\r\n                    const move_options = piece.move_options(this)\r\n                    if (this.turn === 'w') {\r\n                        if (SpotInOptions(this.whiteKing.spot,move_options)) {\r\n                            return true\r\n                    }\r\n                }\r\n                else if (SpotInOptions(this.blackKing.spot,move_options)) {\r\n                    return true\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    \r\n    isCheckMate() {\r\n        for (let row = 0; row < this.board.length; row++) {\r\n            for (let column = 0; column < this.board[row].length; column++) {\r\n                const piece = this.board[row][column]\r\n                if (piece.color === this.turn) {\r\n                    const move_options = piece.getAvaliableMoves(this)\r\n                    if (move_options.length > 0) {\r\n                        return false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    \r\n    isPat() {\r\n        return this.isCheckMate()\r\n    }\r\n    \r\n}\r\n\r\nexport class Copy_Game extends Game {\r\n    constructor (game) {\r\n        super()\r\n        this.turn = game.turn\r\n        this.board = this.createCopyBoard(game.board)\r\n        this.whiteKing = this.board[game.whiteKing.spot[0]][game.whiteKing.spot[1]]\r\n        this.blackKing = this.board[game.blackKing.spot[0]][game.blackKing.spot[1]]\r\n    }\r\n    \r\n    createCopyBoard (board) {\r\n        const copy_board = []\r\n        for (let rowindex = 0; rowindex < 8; rowindex++) {\r\n            const row = []\r\n            for (let columnindex = 0; columnindex < 8; columnindex++) {\r\n                let p = board[rowindex][columnindex].create_copy()\r\n                row.push(p);\r\n            }\r\n            copy_board.push(row)\r\n        }\r\n        return copy_board\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}