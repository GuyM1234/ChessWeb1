{"ast":null,"code":"import { get_opp_color } from \"./Methods\";\nimport { Copy_Game } from \"./Game\";\nexport class Piece {\n  constructor(spot, lett, color) {\n    this.spot = spot;\n    this.lett = lett;\n    this.color = color;\n    this.moved = false;\n  }\n\n  move_options() {\n    return [];\n  }\n\n  getAvaliableMoves(game) {\n    let option;\n    let copyGame;\n    const move_options = this.move_options(game.board);\n    let newMoveOptions = [];\n    console.log(game.turn);\n    console.log(this.color);\n\n    if (game.isCheck()) {\n      for (let index = 0; index < move_options.length; index++) {\n        option = move_options[index];\n        copyGame = new Copy_Game(game);\n        copyGame.board[this.spot[0]][this.spot[1]].move(option, copyGame);\n\n        if (!copyGame.isCheck()) {\n          newMoveOptions.push(option);\n        }\n\n        return newMoveOptions;\n      }\n    } else {\n      return move_options;\n    }\n  }\n\n  move(chosen_spot, game_board) {\n    game_board.update(chosen_spot, this);\n    this.spot = chosen_spot;\n\n    if (!this.moved) {\n      this.moved = true;\n    }\n  }\n\n  check_dir(rowDir, columnDir, board, option_list) {\n    let row = this.spot[0];\n    let column = this.spot[1];\n    let blocked = false;\n\n    while (!blocked) {\n      row += rowDir;\n      column += columnDir;\n\n      if (!this.is_spot_free(row, column, board, option_list)) {\n        blocked = true;\n        this.is_spot_eatable(row, column, board, option_list);\n      }\n    }\n  }\n\n  create_copy() {\n    return new Piece(this.spot, this.lett, this.color);\n  }\n\n  is_spot_free(row, column, board, move_option) {\n    try {\n      if (board[row][column].color === \"e\") {\n        move_option.push([row, column]);\n        return true;\n      } else {\n        return false;\n      }\n    } catch {}\n  }\n\n  is_spot_eatable(row, column, board, move_option) {\n    try {\n      if (board[row][column].color === get_opp_color(this.color)) {\n        move_option.push([row, column]);\n      }\n    } catch {}\n  }\n\n}\nexport class Pawn extends Piece {\n  move_options(board) {\n    const row = this.spot[0];\n    const column = this.spot[1];\n    const move_options = [];\n\n    if (this.color === \"w\") {\n      this.is_spot_free(row - 1, column, board, move_options);\n\n      if (!this.moved) {\n        this.is_spot_free(row - 2, column, board, move_options);\n      }\n\n      this.is_spot_eatable(row - 1, column + 1, board, move_options);\n      this.is_spot_eatable(row - 1, column - 1, board, move_options);\n    } else {\n      this.is_spot_free(row + 1, column, board, move_options);\n\n      if (!this.moved) {\n        this.is_spot_free(row + 2, column, board, move_options);\n      }\n\n      this.is_spot_eatable(row + 1, column + 1, board, move_options);\n      this.is_spot_eatable(row + 1, column - 1, board, move_options);\n    }\n\n    return move_options;\n  }\n\n  create_copy() {\n    return new Pawn(this.spot, this.lett, this.color);\n  }\n\n}\nexport class Rook extends Piece {\n  move_options(board) {\n    const option_list = [];\n    this.check_dir(1, 0, board, option_list);\n    this.check_dir(-1, 0, board, option_list);\n    this.check_dir(0, 1, board, option_list);\n    this.check_dir(0, -1, board, option_list);\n    return option_list;\n  }\n\n  create_copy() {\n    return new Rook(this.spot, this.lett, this.color);\n  }\n\n}\nexport class Bishop extends Piece {\n  move_options(board) {\n    const option_list = [];\n    this.check_dir(1, 1, board, option_list);\n    this.check_dir(-1, -1, board, option_list);\n    this.check_dir(-1, 1, board, option_list);\n    this.check_dir(1, -1, board, option_list);\n    return option_list;\n  }\n\n  create_copy() {\n    return new Bishop(this.spot, this.lett, this.color);\n  }\n\n}\nexport class Queen extends Piece {\n  move_options(board) {\n    let option_list = [];\n    this.check_dir(1, 0, board, option_list);\n    this.check_dir(-1, 0, board, option_list);\n    this.check_dir(0, 1, board, option_list);\n    this.check_dir(0, -1, board, option_list);\n    this.check_dir(1, 1, board, option_list);\n    this.check_dir(-1, -1, board, option_list);\n    this.check_dir(-1, 1, board, option_list);\n    this.check_dir(1, -1, board, option_list);\n    return option_list;\n  }\n\n  create_copy() {\n    return new Queen(this.spot, this.lett, this.color);\n  }\n\n}\nexport class King extends Piece {\n  move_options(board) {\n    const option_list = [];\n    const row = this.spot[0];\n    const column = this.spot[1];\n    const options = [[row + 1, column], [row + 1, column + 1], [row, column + 1], [row - 1, column + 1], [row - 1, column], [row - 1, column - 1], [row, column - 1], [row + 1, column - 1]];\n    let option;\n\n    for (let index = 0; index < options.length; index++) {\n      option = options[index];\n\n      if (!this.is_spot_free(option[0], option[1], board, option_list)) {\n        this.is_spot_eatable(option[0], option[1], board, option_list);\n      }\n    }\n\n    return option_list;\n  }\n\n  create_copy() {\n    return new King(this.spot, this.lett, this.color);\n  }\n\n}\nexport class Knight extends Piece {\n  move_options(board) {\n    const option_list = [];\n    const row = this.spot[0];\n    const column = this.spot[1];\n    const options = [[row + 2, column + 1], [row + 2, column - 1], [row - 1, column + 2], [row - 2, column + 1], [row - 2, column - 1], [row + 1, column + 2], [row + 1, column - 2], [row - 1, column - 2]];\n    let option;\n\n    for (let index = 0; index < options.length; index++) {\n      option = options[index];\n\n      if (!this.is_spot_free(option[0], option[1], board, option_list)) {\n        this.is_spot_eatable(option[0], option[1], board, option_list);\n      }\n    }\n\n    return option_list;\n  }\n\n  create_copy() {\n    return new Knight(this.spot, this.lett, this.color);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/Computer_Science/ChessWeb1/src/Components/pieces.js"],"names":["get_opp_color","Copy_Game","Piece","constructor","spot","lett","color","moved","move_options","getAvaliableMoves","game","option","copyGame","board","newMoveOptions","console","log","turn","isCheck","index","length","move","push","chosen_spot","game_board","update","check_dir","rowDir","columnDir","option_list","row","column","blocked","is_spot_free","is_spot_eatable","create_copy","move_option","Pawn","Rook","Bishop","Queen","King","options","Knight"],"mappings":"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","sourcesContent":["import { get_opp_color } from \"./Methods\";\r\nimport {Copy_Game} from \"./Game\"\r\n\r\nexport class Piece {\r\n    constructor (spot,lett,color){\r\n        this.spot = spot\r\n        this.lett = lett\r\n        this.color = color\r\n        this.moved = false\r\n    }\r\n\r\n    move_options() {\r\n        return []\r\n    }\r\n\r\n    getAvaliableMoves(game) {\r\n        let option\r\n        let copyGame\r\n        const move_options = this.move_options(game.board)\r\n        let newMoveOptions = []\r\n        console.log(game.turn)\r\n        console.log(this.color)\r\n        if (game.isCheck()) {\r\n            for (let index = 0; index < move_options.length; index++) {\r\n                option = move_options[index];\r\n                copyGame = new Copy_Game(game)\r\n                copyGame.board[this.spot[0]][this.spot[1]].move(option,copyGame)\r\n                if (!copyGame.isCheck()) {\r\n                    newMoveOptions.push(option)\r\n                }\r\n                return newMoveOptions\r\n            }\r\n        }\r\n        else {\r\n            return move_options\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    move (chosen_spot,game_board){\r\n        game_board.update(chosen_spot,this)\r\n        this.spot = chosen_spot\r\n        if (!this.moved) {\r\n            this.moved = true\r\n        }\r\n    }\r\n    \r\n    check_dir (rowDir,columnDir,board,option_list) {\r\n        let row = this.spot[0]\r\n        let column = this.spot[1]\r\n        let blocked = false\r\n        while (!blocked) {\r\n            row += rowDir\r\n            column += columnDir\r\n            if (!this.is_spot_free(row ,column, board, option_list)){\r\n                blocked = true;\r\n                this.is_spot_eatable(row, column, board, option_list);\r\n            }\r\n        }\r\n    }\r\n\r\n    create_copy () {\r\n        return new Piece(this.spot,this.lett,this.color)\r\n    }\r\n    \r\n    is_spot_free(row,column,board,move_option) {\r\n        try {\r\n            if (board[row][column].color === \"e\"){\r\n                move_option.push([row,column])\r\n                return true;\r\n            }\r\n            else{\r\n                return false;\r\n            }\r\n        }\r\n        catch {}\r\n    }\r\n\r\n    is_spot_eatable(row,column,board,move_option) {\r\n        try{\r\n            if (board[row][column].color === get_opp_color(this.color)){\r\n                move_option.push([row,column])\r\n            }\r\n        }\r\n        catch {}\r\n    }\r\n}\r\n\r\n\r\nexport class Pawn extends Piece{\r\n    move_options(board) {\r\n        const row = this.spot[0]\r\n        const column = this.spot[1]\r\n        const move_options = []\r\n        if  (this.color === \"w\"){\r\n            this.is_spot_free(row - 1, column,board,move_options)\r\n            if (!this.moved){\r\n                this.is_spot_free(row - 2,column,board,move_options)\r\n            } \r\n            this.is_spot_eatable(row - 1, column + 1,board,move_options)\r\n            this.is_spot_eatable(row - 1, column - 1,board,move_options)\r\n        }\r\n        else {\r\n            this.is_spot_free(row + 1, column,board,move_options)\r\n            if (!this.moved){\r\n                this.is_spot_free(row + 2,column,board,move_options)\r\n            }\r\n            this.is_spot_eatable(row + 1, column + 1,board,move_options)\r\n            this.is_spot_eatable(row + 1, column - 1,board,move_options)\r\n        }\r\n        return move_options;\r\n    }\r\n    create_copy () {\r\n        return new Pawn(this.spot,this.lett,this.color)\r\n    }\r\n}\r\n\r\n\r\nexport class Rook extends Piece{\r\n    move_options(board){\r\n        const option_list = [];\r\n        this.check_dir(1,0,board,option_list)\r\n        this.check_dir(-1,0,board,option_list)\r\n        this.check_dir(0,1,board,option_list)\r\n        this.check_dir(0,-1,board,option_list)\r\n        return option_list\r\n    }\r\n    create_copy () {\r\n        return new Rook(this.spot,this.lett,this.color)\r\n    }\r\n}\r\nexport class Bishop extends Piece{\r\n    move_options(board){\r\n        const option_list = [];\r\n        this.check_dir(1,1,board,option_list)\r\n        this.check_dir(-1,-1,board,option_list)\r\n        this.check_dir(-1,1,board,option_list)\r\n        this.check_dir(1,-1,board,option_list)\r\n        return option_list\r\n    }\r\n    create_copy () {\r\n        return new Bishop(this.spot,this.lett,this.color)\r\n    }\r\n}\r\n\r\nexport class Queen extends Piece {\r\n    move_options(board) {\r\n        let option_list = []\r\n        this.check_dir(1,0,board,option_list)\r\n        this.check_dir(-1,0,board,option_list)\r\n        this.check_dir(0,1,board,option_list)\r\n        this.check_dir(0,-1,board,option_list)\r\n        this.check_dir(1,1,board,option_list)\r\n        this.check_dir(-1,-1,board,option_list)\r\n        this.check_dir(-1,1,board,option_list)\r\n        this.check_dir(1,-1,board,option_list)\r\n        return option_list\r\n    }\r\n    create_copy () {\r\n        return new Queen(this.spot,this.lett,this.color)\r\n    }\r\n}\r\n\r\nexport class King extends Piece {\r\n    move_options(board) {\r\n        const option_list = []\r\n        const row = this.spot[0]\r\n        const column = this.spot[1]\r\n        const options = [[row + 1,column],[row + 1,column + 1],\r\n        [row,column + 1],[row - 1,column + 1],[row - 1,column],\r\n        [row -1 ,column -1],[row,column - 1],[row + 1,column -1]]\r\n\r\n        let option\r\n        for (let index = 0; index < options.length; index++) {\r\n            option = options[index]\r\n            if (!this.is_spot_free(option[0],option[1],board,option_list)){\r\n                this.is_spot_eatable(option[0],option[1],board,option_list)\r\n            }\r\n        }\r\n        return option_list\r\n    }\r\n    create_copy () {\r\n        return new King(this.spot,this.lett,this.color)\r\n    }\r\n}\r\n\r\nexport class Knight extends Piece {\r\n    move_options(board) {\r\n        const option_list = []\r\n        const row = this.spot[0]\r\n        const column = this.spot[1]\r\n\r\n        const options = [[row + 2,column + 1],[row + 2,column - 1],\r\n        [row - 1,column + 2],[row - 2,column + 1],[row - 2,column - 1],\r\n        [row + 1 ,column + 2],[row + 1,column - 2],[row - 1,column -2]]\r\n        let option\r\n        for (let index = 0; index < options.length; index++) {\r\n            option = options[index]\r\n            if (!this.is_spot_free(option[0],option[1],board,option_list)){\r\n                this.is_spot_eatable(option[0],option[1],board,option_list)\r\n            }\r\n        }\r\n        return option_list\r\n    }\r\n    create_copy () {\r\n        return new Knight(this.spot,this.lett,this.color)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}