{"ast":null,"code":"import { Piece, Pawn } from \"./pieces\";\n\nclass GameBoard {\n  constructor() {\n    this.board = this.createBoard();\n  }\n\n  createBoard() {\n    const board = [];\n\n    for (let rowindex = 0; rowindex < 8; rowindex++) {\n      const row = [];\n\n      for (let columnindex = 0; columnindex < 8; columnindex++) {\n        let p = new Piece([rowindex, columnindex], '0', 'e');\n        row.push(p);\n      }\n\n      board.push(row);\n    }\n\n    board[6] = board[6].map((x, index) => new Pawn([6, index], 'P', 'w'));\n    board[1] = board[1].map((x, index) => new Pawn([1, index], 'P', 'w'));\n    return board;\n  }\n\n  update(chosen_spot, piece) {\n    this.board[chosen_spot[0]][chosen_spot[1]] = piece;\n    this.board[piece.spot[0]][piece.spot[1]] = new Piece(piece.spot, '0', 'e');\n  }\n\n}\n\nexport default GameBoard;","map":{"version":3,"sources":["C:/Users/user/Desktop/Computer_Science/ChessWeb/my-app/src/Components/GameBoard.js"],"names":["Piece","Pawn","GameBoard","constructor","board","createBoard","rowindex","row","columnindex","p","push","map","x","index","update","chosen_spot","piece","spot"],"mappings":"AAAA,SAASA,KAAT,EAAiBC,IAAjB,QAA6B,UAA7B;;AAGA,MAAMC,SAAN,CAAgB;AACZC,EAAAA,WAAW,GAAG;AACV,SAAKC,KAAL,GAAa,KAAKC,WAAL,EAAb;AACH;;AAEDA,EAAAA,WAAW,GAAI;AACX,UAAMD,KAAK,GAAG,EAAd;;AACA,SAAK,IAAIE,QAAQ,GAAG,CAApB,EAAuBA,QAAQ,GAAG,CAAlC,EAAqCA,QAAQ,EAA7C,EAAiD;AAC7C,YAAMC,GAAG,GAAG,EAAZ;;AACA,WAAK,IAAIC,WAAW,GAAG,CAAvB,EAA0BA,WAAW,GAAG,CAAxC,EAA2CA,WAAW,EAAtD,EAA0D;AACtD,YAAIC,CAAC,GAAG,IAAIT,KAAJ,CAAU,CAACM,QAAD,EAAUE,WAAV,CAAV,EAAiC,GAAjC,EAAqC,GAArC,CAAR;AACAD,QAAAA,GAAG,CAACG,IAAJ,CAASD,CAAT;AACH;;AACDL,MAAAA,KAAK,CAACM,IAAN,CAAWH,GAAX;AACH;;AACDH,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,CAASO,GAAT,CAAa,CAACC,CAAD,EAAGC,KAAH,KAAa,IAAIZ,IAAJ,CAAS,CAAC,CAAD,EAAGY,KAAH,CAAT,EAAmB,GAAnB,EAAuB,GAAvB,CAA1B,CAAX;AACAT,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,CAASO,GAAT,CAAa,CAACC,CAAD,EAAGC,KAAH,KAAa,IAAIZ,IAAJ,CAAS,CAAC,CAAD,EAAGY,KAAH,CAAT,EAAmB,GAAnB,EAAuB,GAAvB,CAA1B,CAAX;AACA,WAAOT,KAAP;AACH;;AAEDU,EAAAA,MAAM,CAAEC,WAAF,EAAeC,KAAf,EAAsB;AACxB,SAAKZ,KAAL,CAAWW,WAAW,CAAC,CAAD,CAAtB,EAA2BA,WAAW,CAAC,CAAD,CAAtC,IAA6CC,KAA7C;AACA,SAAKZ,KAAL,CAAWY,KAAK,CAACC,IAAN,CAAW,CAAX,CAAX,EAA0BD,KAAK,CAACC,IAAN,CAAW,CAAX,CAA1B,IAA2C,IAAIjB,KAAJ,CAAUgB,KAAK,CAACC,IAAhB,EAAqB,GAArB,EAAyB,GAAzB,CAA3C;AACH;;AAvBW;;AA0BhB,eAAef,SAAf","sourcesContent":["import { Piece , Pawn}  from \"./pieces\"\r\n\r\n\r\nclass GameBoard {\r\n    constructor() {\r\n        this.board = this.createBoard()\r\n    }\r\n\r\n    createBoard () {\r\n        const board = []\r\n        for (let rowindex = 0; rowindex < 8; rowindex++) {\r\n            const row = []\r\n            for (let columnindex = 0; columnindex < 8; columnindex++) {\r\n                let p = new Piece([rowindex,columnindex],'0','e')\r\n                row.push(p);\r\n            }\r\n            board.push(row)\r\n        }\r\n        board[6] = board[6].map((x,index) => new Pawn([6,index],'P','w'))\r\n        board[1] = board[1].map((x,index) => new Pawn([1,index],'P','w'))\r\n        return board;\r\n    } \r\n    \r\n    update (chosen_spot, piece) {\r\n        this.board[chosen_spot[0]][chosen_spot[1]] = piece;\r\n        this.board[piece.spot[0]][piece.spot[1]] = new Piece(piece.spot,'0','e');\r\n    }\r\n}\r\n\r\nexport default GameBoard"]},"metadata":{},"sourceType":"module"}