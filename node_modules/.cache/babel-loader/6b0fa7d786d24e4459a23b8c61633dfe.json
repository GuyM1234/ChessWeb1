{"ast":null,"code":"export class Piece {\n  constructor(spot, lett, color) {\n    this.spot = spot;\n    this.lett = lett;\n    this.color = color;\n    this.moved = false;\n  }\n\n  move_options() {\n    return [];\n  }\n\n  move(chosen_spot, game_board) {\n    game_board.update(chosen_spot, this);\n    this.spot = chosen_spot;\n\n    if (!this.moved) {\n      this.moved = true;\n    }\n  }\n\n  check_dir(rowDir, columnDir, board, option_list) {\n    let row = this.spot[0];\n    let column = this.spot[1];\n    let blocked = false;\n\n    while (!blocked) {\n      row += rowDir;\n      column += columnDir;\n\n      if (!this.is_spot_free(row, column, board, option_list)) {\n        blocked = true;\n        this.is_spot_eatable(row, column, board, option_list);\n      }\n    }\n  }\n\n  create_copy() {\n    return typeof this(this.spot, this.lett, this.color);\n  }\n\n  is_spot_free(row, column, board, move_option) {\n    try {\n      if (board[row][column].color === \"e\") {\n        move_option.push([row, column]);\n        return true;\n      } else {\n        return false;\n      }\n    } catch {}\n  }\n\n  is_spot_eatable(row, column, board, move_option) {\n    try {\n      if (board[row][column].color === get_opp_color(this.color)) {\n        move_option.push([row, column]);\n      }\n    } catch {}\n  }\n\n}\nexport class Pawn extends Piece {\n  move_options(board) {\n    const row = this.spot[0];\n    const column = this.spot[1];\n    const move_options = [];\n\n    if (this.color === \"w\") {\n      this.is_spot_free(row - 1, column, board, move_options);\n\n      if (!this.moved) {\n        this.is_spot_free(row - 2, column, board, move_options);\n      }\n\n      this.is_spot_eatable(row - 1, column + 1, board, move_options);\n      this.is_spot_eatable(row - 1, column - 1, board, move_options);\n    } else {\n      this.is_spot_free(row + 1, column, board, move_options);\n\n      if (!this.moved) {\n        this.is_spot_free(row + 2, column, board, move_options);\n      }\n\n      this.is_spot_eatable(row + 1, column + 1, board, move_options);\n      this.is_spot_eatable(row + 1, column - 1, board, move_options);\n    }\n\n    return move_options;\n  }\n\n}\nexport class Rook extends Piece {\n  move_options(board) {\n    const option_list = [];\n    this.check_dir(1, 0, board, option_list);\n    this.check_dir(-1, 0, board, option_list);\n    this.check_dir(0, 1, board, option_list);\n    this.check_dir(0, -1, board, option_list);\n    return option_list;\n  }\n\n}\nexport class Bishop extends Piece {\n  move_options(board) {\n    const option_list = [];\n    this.check_dir(1, 1, board, option_list);\n    this.check_dir(-1, -1, board, option_list);\n    this.check_dir(-1, 1, board, option_list);\n    this.check_dir(1, -1, board, option_list);\n    return option_list;\n  }\n\n}\n\nconst get_opp_color = color => {\n  if (color === \"w\") {\n    return 'b';\n  } else {\n    return 'w';\n  }\n};\n\nexport class Queen extends Piece {\n  move_options(board) {\n    let option_list = [];\n    this.check_dir(1, 0, board, option_list);\n    this.check_dir(-1, 0, board, option_list);\n    this.check_dir(0, 1, board, option_list);\n    this.check_dir(0, -1, board, option_list);\n    this.check_dir(1, 1, board, option_list);\n    this.check_dir(-1, -1, board, option_list);\n    this.check_dir(-1, 1, board, option_list);\n    this.check_dir(1, -1, board, option_list);\n    return option_list;\n  }\n\n}\nexport class King extends Piece {\n  move_options(board) {\n    const option_list = [];\n    const row = this.spot[0];\n    const column = this.spot[1];\n    const options = [[row + 1, column], [row + 1, column + 1], [row, column + 1], [row - 1, column + 1], [row - 1, column], [row - 1, column - 1], [row, column - 1], [row + 1, column - 1]];\n    let option;\n\n    for (let index = 0; index < options.length; index++) {\n      option = options[index];\n\n      if (!this.is_spot_free(option[0], option[1], board, option_list)) {\n        this.is_spot_eatable(option[0], option[1], board, option_list);\n      }\n    }\n\n    return option_list;\n  }\n\n}\nexport class Knight extends Piece {\n  move_options(board) {\n    const option_list = [];\n    const row = this.spot[0];\n    const column = this.spot[1];\n    const options = [[row + 2, column + 1], [row + 2, column - 1], [row - 1, column + 2], [row - 2, column + 1], [row - 2, column - 1], [row + 1, column + 2], [row + 1, column - 2], [row - 1, column - 2]];\n    let option;\n\n    for (let index = 0; index < options.length; index++) {\n      option = options[index];\n\n      if (!this.is_spot_free(option[0], option[1], board, option_list)) {\n        this.is_spot_eatable(option[0], option[1], board, option_list);\n      }\n    }\n\n    return option_list;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/Computer_Science/ChessWeb1/src/Components/pieces.js"],"names":["Piece","constructor","spot","lett","color","moved","move_options","move","chosen_spot","game_board","update","check_dir","rowDir","columnDir","board","option_list","row","column","blocked","is_spot_free","is_spot_eatable","create_copy","move_option","push","get_opp_color","Pawn","Rook","Bishop","Queen","King","options","option","index","length","Knight"],"mappings":"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","sourcesContent":["\r\nexport class Piece {\r\n    constructor (spot,lett,color){\r\n        this.spot = spot\r\n        this.lett = lett\r\n        this.color = color\r\n        this.moved = false\r\n    }\r\n\r\n    move_options () {\r\n        return []\r\n    }\r\n\r\n    move (chosen_spot,game_board){\r\n        game_board.update(chosen_spot,this)\r\n        this.spot = chosen_spot\r\n        if (!this.moved) {\r\n            this.moved = true\r\n        }\r\n    }\r\n    \r\n    check_dir (rowDir,columnDir,board,option_list) {\r\n        let row = this.spot[0]\r\n        let column = this.spot[1]\r\n        let blocked = false\r\n        while (!blocked) {\r\n            row += rowDir\r\n            column += columnDir\r\n            if (!this.is_spot_free(row ,column, board, option_list)){\r\n                blocked = true;\r\n                this.is_spot_eatable(row, column, board, option_list);\r\n            }\r\n        }\r\n    }\r\n\r\n    create_copy () {\r\n        return typeof(this)(this.spot,this.lett,this.color)\r\n    }\r\n    \r\n    is_spot_free(row,column,board,move_option) {\r\n        try {\r\n            if (board[row][column].color === \"e\"){\r\n                move_option.push([row,column])\r\n                return true;\r\n            }\r\n            else{\r\n                return false;\r\n            }\r\n        }\r\n        catch {}\r\n    }\r\n\r\n    is_spot_eatable(row,column,board,move_option) {\r\n        try{\r\n            if (board[row][column].color === get_opp_color(this.color)){\r\n                move_option.push([row,column])\r\n            }\r\n        }\r\n        catch {}\r\n    }\r\n}\r\n\r\n\r\nexport class Pawn extends Piece{\r\n    move_options(board) {\r\n        const row = this.spot[0]\r\n        const column = this.spot[1]\r\n        const move_options = []\r\n        if  (this.color === \"w\"){\r\n            this.is_spot_free(row - 1, column,board,move_options)\r\n            if (!this.moved){\r\n                this.is_spot_free(row - 2,column,board,move_options)\r\n            } \r\n            this.is_spot_eatable(row - 1, column + 1,board,move_options)\r\n            this.is_spot_eatable(row - 1, column - 1,board,move_options)\r\n        }\r\n        else {\r\n            this.is_spot_free(row + 1, column,board,move_options)\r\n            if (!this.moved){\r\n                this.is_spot_free(row + 2,column,board,move_options)\r\n            }\r\n            this.is_spot_eatable(row + 1, column + 1,board,move_options)\r\n            this.is_spot_eatable(row + 1, column - 1,board,move_options)\r\n        }\r\n        return move_options;\r\n    }\r\n}\r\n\r\n\r\nexport class Rook extends Piece{\r\n    move_options(board){\r\n        const option_list = [];\r\n        this.check_dir(1,0,board,option_list)\r\n        this.check_dir(-1,0,board,option_list)\r\n        this.check_dir(0,1,board,option_list)\r\n        this.check_dir(0,-1,board,option_list)\r\n        return option_list\r\n    }\r\n}\r\nexport class Bishop extends Piece{\r\n    move_options(board){\r\n        const option_list = [];\r\n        this.check_dir(1,1,board,option_list)\r\n        this.check_dir(-1,-1,board,option_list)\r\n        this.check_dir(-1,1,board,option_list)\r\n        this.check_dir(1,-1,board,option_list)\r\n        return option_list\r\n    }\r\n}\r\n\r\nconst get_opp_color= (color) => {\r\n    if (color === \"w\") {\r\n        return 'b'\r\n    }\r\n    else{\r\n        return 'w'\r\n    }\r\n}\r\n\r\nexport class Queen extends Piece {\r\n    move_options(board) {\r\n        let option_list = []\r\n        this.check_dir(1,0,board,option_list)\r\n        this.check_dir(-1,0,board,option_list)\r\n        this.check_dir(0,1,board,option_list)\r\n        this.check_dir(0,-1,board,option_list)\r\n        this.check_dir(1,1,board,option_list)\r\n        this.check_dir(-1,-1,board,option_list)\r\n        this.check_dir(-1,1,board,option_list)\r\n        this.check_dir(1,-1,board,option_list)\r\n        return option_list\r\n    }\r\n}\r\n\r\nexport class King extends Piece {\r\n    move_options(board) {\r\n        const option_list = []\r\n        const row = this.spot[0]\r\n        const column = this.spot[1]\r\n\r\n        const options = [[row + 1,column],[row + 1,column + 1],\r\n        [row,column + 1],[row - 1,column + 1],[row - 1,column],\r\n        [row -1 ,column -1],[row,column - 1],[row + 1,column -1]]\r\n\r\n        let option\r\n        for (let index = 0; index < options.length; index++) {\r\n            option = options[index]\r\n            if (!this.is_spot_free(option[0],option[1],board,option_list)){\r\n                this.is_spot_eatable(option[0],option[1],board,option_list)\r\n            }\r\n        }\r\n        return option_list\r\n    }\r\n}\r\n\r\nexport class Knight extends Piece {\r\n    move_options(board) {\r\n        const option_list = []\r\n        const row = this.spot[0]\r\n        const column = this.spot[1]\r\n\r\n        const options = [[row + 2,column + 1],[row + 2,column - 1],\r\n        [row - 1,column + 2],[row - 2,column + 1],[row - 2,column - 1],\r\n        [row + 1 ,column + 2],[row + 1,column - 2],[row - 1,column -2]]\r\n        let option\r\n        for (let index = 0; index < options.length; index++) {\r\n            option = options[index]\r\n            if (!this.is_spot_free(option[0],option[1],board,option_list)){\r\n                this.is_spot_eatable(option[0],option[1],board,option_list)\r\n            }\r\n        }\r\n        return option_list\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}