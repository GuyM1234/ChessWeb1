{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Computer_Science\\\\ChessWeb1\\\\src\\\\Components\\\\Board.js\";\nimport React from \"react\";\nimport Block from \"./Block\";\nimport Game from \"./Game\";\n\nclass Board extends React.Component {\n  constructor() {\n    super();\n\n    this.handlePiece = piece => {\n      const row = piece.spot[0];\n      const column = piece.spot[1];\n      this.setState(prevState => {\n        if (this.state.piece == null) {\n          const move_options = piece.move_options(this.game.board);\n\n          if (move_options.length > 0) {\n            return {\n              piece: piece,\n              game: prevState.game\n            };\n          }\n        } else {\n          // let graphicBoard = prevState.graphicBoard\n          if (this.IsSpotInOptions(piece.spot, prevState.piece.move_options(this.game.board))) {\n            this.state.game.board[prevState.piece.spot[0]][prevState.piece.spot[1]].move([row, column], this.game); // graphicBoard = prevState.graphicBoard.map(row => row.map(Block => {\n            //   console.log(Block.key)\n            //   if (Block.key === String(piece.spot)) {\n            //     // Block.props.piece = prevState.piece\n            //   }\n            //   return Block\n            // }))\n          }\n\n          return {\n            piece: null,\n            game: this.state.game\n          };\n        }\n      }); // if (this.state.chosenPiece === \" \") {\n      //   const move_options = piece.move_options(this.game.board) \n      //   if (move_options.length > 0) {\n      //     this.setState({chosenPiece: this.game.board[row][column], move_options: move_options})\n      //   }\n      // }\n      // else {\n      //   if (this.IsSpotInOptions(piece.spot,this.state.move_options)) {\n      //     this.state.chosenPiece.move(piece.spot, this.game)\n      //     // this.graphicBoard[row][column] = <Block key = {piece.spot} piece = {this.state.chosenPiece} handlePiece = {this.handlePiece} />\n      //     this.graphicBoard[row][column].props.piece = \n      //   }\n      //   this.setState({chosenPiece:\" \", move_options:[]})\n      // }\n    };\n\n    this.IsSpotInOptions = (spot, move_options) => {\n      for (let index = 0; index < move_options.length; index++) {\n        const element = move_options[index];\n\n        if (element[0] === spot[0] && element[1] === spot[1]) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.game = new Game();\n    this.state = {\n      piece: null,\n      game: new Game() // graphicBoard: this.game.board.map(row => row.map(piece => <Block key = {piece.spot} piece = {piece} handlePiece = {this.handlePiece} />))\n\n    };\n  }\n\n  render() {\n    const graphicBoard = this.state.game.board.map(row => row.map(piece => /*#__PURE__*/_jsxDEV(Block, {\n      piece: piece,\n      handlePiece: this.handlePiece\n    }, piece.spot, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 81\n    }, this)));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: graphicBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["C:/Users/user/Desktop/Computer_Science/ChessWeb1/src/Components/Board.js"],"names":["React","Block","Game","Board","Component","constructor","handlePiece","piece","row","spot","column","setState","prevState","state","move_options","game","board","length","IsSpotInOptions","move","index","element","render","graphicBoard","map"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Block from \"./Block\"\r\nimport Game from \"./Game\";\r\n\r\nclass Board extends React.Component {\r\n    constructor () {\r\n        super()\r\n        this.game = new Game()\r\n\r\n        this.state = {\r\n          piece: null,\r\n          game: new Game()\r\n\r\n          // graphicBoard: this.game.board.map(row => row.map(piece => <Block key = {piece.spot} piece = {piece} handlePiece = {this.handlePiece} />))\r\n        }\r\n    }\r\n    handlePiece = (piece) => {\r\n        const row = piece.spot[0]\r\n        const column = piece.spot[1]\r\n        this.setState(prevState => {\r\n          if (this.state.piece == null) {\r\n              const move_options = piece.move_options(this.game.board) \r\n              if (move_options.length > 0) { \r\n                return {piece: piece, game: prevState.game}\r\n              }\r\n            }\r\n          else{\r\n            // let graphicBoard = prevState.graphicBoard\r\n            if (this.IsSpotInOptions(piece.spot, prevState.piece.move_options(this.game.board))) {\r\n              this.state.game.board[prevState.piece.spot[0]][prevState.piece.spot[1]].move([row,column],this.game)\r\n              // graphicBoard = prevState.graphicBoard.map(row => row.map(Block => {\r\n              //   console.log(Block.key)\r\n              //   if (Block.key === String(piece.spot)) {\r\n              //     // Block.props.piece = prevState.piece\r\n              //   }\r\n              //   return Block\r\n              // }))\r\n            }\r\n            return {piece: null, game: this.state.game}\r\n          }\r\n        })\r\n        // if (this.state.chosenPiece === \" \") {\r\n        //   const move_options = piece.move_options(this.game.board) \r\n        //   if (move_options.length > 0) {\r\n        //     this.setState({chosenPiece: this.game.board[row][column], move_options: move_options})\r\n        //   }\r\n        // }\r\n        // else {\r\n        //   if (this.IsSpotInOptions(piece.spot,this.state.move_options)) {\r\n        //     this.state.chosenPiece.move(piece.spot, this.game)\r\n        //     // this.graphicBoard[row][column] = <Block key = {piece.spot} piece = {this.state.chosenPiece} handlePiece = {this.handlePiece} />\r\n        //     this.graphicBoard[row][column].props.piece = \r\n        //   }\r\n        //   this.setState({chosenPiece:\" \", move_options:[]})\r\n        // }\r\n      }\r\n\r\n      // UpdateGraphicBoard = (graphicBoard,board,spot) => {\r\n      //   prevState[row][column].props.piece = this.game.board[row][column]\r\n      //           console.log(\"hi\")\r\n      // }\r\n\r\n      IsSpotInOptions = (spot,move_options) => {\r\n        for (let index = 0; index < move_options.length; index++) {\r\n          const element = move_options[index];\r\n          if (element[0] === spot[0] && element[1] === spot[1]) {\r\n            return true\r\n          }\r\n        }\r\n        return false\r\n      }\r\n\r\n      render () {\r\n        const graphicBoard =  this.state.game.board.map(row => row.map(piece => <Block key = {piece.spot} piece = {piece} handlePiece = {this.handlePiece} />))\r\n        return (\r\n            <div className=\"board\">\r\n                {graphicBoard}\r\n            </div> \r\n        )\r\n      }  \r\n}\r\nexport default Board"]},"metadata":{},"sourceType":"module"}