{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Computer_Science\\\\ChessWeb1\\\\src\\\\Components\\\\Board.js\";\nimport React from \"react\";\nimport Block from \"./Block\";\nimport { Game, Copy_Game } from \"./Game\";\n\nclass Board extends React.Component {\n  constructor() {\n    super();\n\n    this.handleClick = piece => {\n      const row = piece.spot[0];\n      const column = piece.spot[1];\n      this.setState(prevState => {\n        if (this.state.piece == null) {\n          if (this.state.game.turn === piece.color) {\n            const move_options = piece.move_options(this.state.game.board);\n\n            if (move_options.length > 0) {\n              return {\n                piece: piece,\n                game: prevState.game,\n                move_options: move_options\n              };\n            }\n          }\n        } else {\n          if (this.IsSpotInOptions(piece.spot, this.state.move_options)) {\n            prevState.game.updateTurn();\n            prevState.game.board[prevState.piece.spot[0]][prevState.piece.spot[1]].move([row, column], this.state.game);\n\n            if (prevState.game.isCheck()) {\n              alert(\"check\");\n            }\n          }\n\n          return {\n            piece: null,\n            game: prevState.game,\n            move_options: []\n          };\n        }\n      });\n    };\n\n    this.IsSpotInOptions = (spot, move_options) => {\n      for (let index = 0; index < move_options.length; index++) {\n        const element = move_options[index];\n\n        if (element[0] === spot[0] && element[1] === spot[1]) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.state = {\n      piece: null,\n      game: new Game(),\n      move_options: []\n    };\n  }\n\n  render() {\n    const g = new Copy_Game(this.state.game);\n    g.board[0][0] = 0;\n    console.log(g.board);\n    console.log(this.state.game.board);\n    const graphicBoard = this.state.game.board.map(row => row.map(piece => /*#__PURE__*/_jsxDEV(Block, {\n      piece: piece,\n      handleClick: this.handleClick,\n      isOption: this.IsSpotInOptions(piece.spot, this.state.move_options)\n    }, piece.spot, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 81\n    }, this)));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: graphicBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["C:/Users/user/Desktop/Computer_Science/ChessWeb1/src/Components/Board.js"],"names":["React","Block","Game","Copy_Game","Board","Component","constructor","handleClick","piece","row","spot","column","setState","prevState","state","game","turn","color","move_options","board","length","IsSpotInOptions","updateTurn","move","isCheck","alert","index","element","render","g","console","log","graphicBoard","map"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Block from \"./Block\"\r\nimport { Game, Copy_Game } from \"./Game\";\r\nclass Board extends React.Component {\r\n    constructor () {\r\n        super()\r\n        this.state = {\r\n          piece: null,\r\n          game: new Game(),\r\n          move_options: []\r\n        }\r\n    }\r\n    handleClick = (piece) => {\r\n        const row = piece.spot[0]\r\n        const column = piece.spot[1]\r\n        this.setState(prevState => {\r\n          if (this.state.piece == null) {\r\n            if (this.state.game.turn === piece.color) {\r\n              const move_options = piece.move_options(this.state.game.board) \r\n              if (move_options.length > 0) { \r\n                return {piece: piece, game: prevState.game, move_options: move_options}\r\n              }\r\n            }\r\n          }\r\n          else{\r\n            if (this.IsSpotInOptions(piece.spot, this.state.move_options)) {\r\n              prevState.game.updateTurn()\r\n              prevState.game.board[prevState.piece.spot[0]][prevState.piece.spot[1]].move([row,column],this.state.game)\r\n              if (prevState.game.isCheck()) {\r\n                alert(\"check\")\r\n              }\r\n            }\r\n            return {piece: null, game: prevState.game, move_options: []}\r\n          }\r\n        })\r\n      }\r\n\r\n      IsSpotInOptions = (spot,move_options) => {\r\n        for (let index = 0; index < move_options.length; index++) {\r\n          const element = move_options[index];\r\n          if (element[0] === spot[0] && element[1] === spot[1]) {\r\n            return true\r\n          }\r\n        }\r\n        return false\r\n      }\r\n\r\n      render () {\r\n        const g = new Copy_Game(this.state.game)\r\n        g.board[0][0] = 0\r\n        console.log(g.board)\r\n        console.log(this.state.game.board)\r\n        const graphicBoard =  this.state.game.board.map(row => row.map(piece => <Block key = {piece.spot} piece = {piece} handleClick = {this.handleClick} isOption = {this.IsSpotInOptions(piece.spot,this.state.move_options)}/>))\r\n        return (\r\n            <div className=\"board\">\r\n                {graphicBoard}\r\n            </div> \r\n        )\r\n      }  \r\n}\r\nexport default Board"]},"metadata":{},"sourceType":"module"}