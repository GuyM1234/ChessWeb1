{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\stein\\\\Documents\\\\GitHub\\\\ChessWeb1\\\\src\\\\Components\\\\Timer.js\";\nimport React from 'react';\nimport Board from \"./Components/Board\";\nimport { Game } from \"./Components/Game\";\nimport SpotInOptions, { get_opp_color } from \"./Components/Methods\";\nimport Timer from \"./Components/Timer\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.handleClick = piece => {\n      const row = piece.spot[0];\n      const column = piece.spot[1];\n      this.setState(prevState => {\n        if (this.state.piece == null) {\n          if (this.state.game.turn === piece.color) {\n            const move_options = piece.getAvaliableMoves(prevState.game);\n\n            if (move_options.length > 0) {\n              return {\n                piece: piece,\n                move_options: move_options\n              };\n            }\n          }\n        } else {\n          if (SpotInOptions(piece.spot, this.state.move_options)) {\n            prevState.game.board[prevState.piece.spot[0]][prevState.piece.spot[1]].move([row, column], this.state.game);\n            prevState.game.updateTurn();\n          }\n\n          return {\n            piece: null,\n            game: prevState.game,\n            move_options: [],\n            status: this.updateStatus(prevState.game)\n          };\n        }\n      });\n    };\n\n    this.updateStatus = () => {\n      if (this.state.game.isCheck()) {\n        if (this.state.game.isCheckMate()) {\n          this.setState({\n            winner: get_opp_color(this.state.game.turn)\n          });\n          return \"CHECKMATE!\";\n        } else {\n          return \"CHECK!\";\n        }\n      } else if (this.state.game.isPat()) {\n        return \"PAT!\";\n      } else {\n        return \" \";\n      }\n    };\n\n    this.outOfTime = color => {\n      this.setState({\n        winner: get_opp_color(color)\n      });\n    };\n\n    this.state = {\n      piece: null,\n      game: new Game(),\n      move_options: [],\n      status: \"\",\n      winner: \"\"\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"status\",\n          children: this.state.status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        board: this.state.game.board,\n        move_options: this.state.move_options,\n        handleClick: this.handleClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timers\",\n        children: [/*#__PURE__*/_jsxDEV(Timer, {\n          color: \"b\",\n          turn: this.state.game.turn,\n          outOfTime: this.outOfTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Timer, {\n          color: \"w\",\n          turn: this.state.game.turn,\n          outOfTime: this.outOfTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/stein/Documents/GitHub/ChessWeb1/src/Components/Timer.js"],"names":["React","Board","Game","SpotInOptions","get_opp_color","Timer","App","Component","constructor","handleClick","piece","row","spot","column","setState","prevState","state","game","turn","color","move_options","getAvaliableMoves","length","board","move","updateTurn","status","updateStatus","isCheck","isCheckMate","winner","isPat","outOfTime","render"],"mappings":"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","sourcesContent":["\r\nimport React from 'react';\r\nimport Board from \"./Components/Board\"\r\nimport { Game } from \"./Components/Game\";\r\nimport SpotInOptions, { get_opp_color } from \"./Components/Methods\"\r\nimport Timer from \"./Components/Timer\"\r\n\r\nclass App extends React.Component {\r\n  constructor () {\r\n    super()\r\n    this.state = {\r\n      piece: null,\r\n      game: new Game(),\r\n      move_options: [],\r\n      status: \"\",\r\n      winner: \"\"\r\n    }\r\n  }\r\n\r\n  handleClick = (piece) => {\r\n    const row = piece.spot[0]\r\n    const column = piece.spot[1]\r\n    this.setState(prevState => {\r\n      if (this.state.piece == null) {\r\n        if (this.state.game.turn === piece.color) {\r\n          const move_options = piece.getAvaliableMoves(prevState.game)\r\n          if (move_options.length > 0) { \r\n            return {piece: piece, move_options: move_options}\r\n          }\r\n        }\r\n      }\r\n      else{\r\n        \r\n        if (SpotInOptions(piece.spot, this.state.move_options)) {\r\n          prevState.game.board[prevState.piece.spot[0]][prevState.piece.spot[1]].move([row,column],this.state.game)\r\n          prevState.game.updateTurn()\r\n        }\r\n        return {piece: null, game: prevState.game, move_options: [], status: this.updateStatus(prevState.game)}\r\n      }\r\n    })\r\n  }\r\n\r\n  updateStatus = () => {\r\n    if (this.state.game.isCheck()) {\r\n      if (this.state.game.isCheckMate()) {\r\n        this.setState({winner: get_opp_color(this.state.game.turn)})\r\n        return \"CHECKMATE!\"\r\n      }\r\n      else{\r\n        return \"CHECK!\"\r\n      }\r\n    }\r\n    else if (this.state.game.isPat()){\r\n      return \"PAT!\"\r\n    }\r\n    else{\r\n      return \" \"\r\n    }\r\n  }\r\n\r\n  outOfTime = (color) => {\r\n    this.setState({winner: get_opp_color(color)})\r\n  }\r\n  \r\n  render () {\r\n    return(\r\n      <div className=\"game\">\r\n        <div className=\"left\">\r\n          <h1 className=\"status\">{this.state.status}</h1>\r\n          {/* <h1 className=\"status\">{this.state.winner}</h1> */}\r\n        </div>\r\n        \r\n        <Board board = {this.state.game.board} move_options = {this.state.move_options} handleClick = {this.handleClick}/>\r\n        <div className=\"timers\">\r\n          <Timer color = 'b' turn = {this.state.game.turn} outOfTime = {this.outOfTime}/>\r\n          <Timer color = 'w' turn = {this.state.game.turn} outOfTime = {this.outOfTime}/>\r\n        </div>\r\n      </div>\r\n     \r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}