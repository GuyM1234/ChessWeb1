{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Computer_Science\\\\ChessWeb1\\\\src\\\\Components\\\\Board.js\";\nimport React from \"react\";\nimport Block from \"./Block\";\nimport { Game } from \"./Game\";\n\nclass Board extends React.Component {\n  constructor() {\n    super(); // this.state = {\n    //   piece: null,\n    //   game: new Game(),\n    //   move_options: []\n    // }\n\n    this.IsSpotInOptions = (spot, move_options) => {\n      for (let index = 0; index < move_options.length; index++) {\n        const element = move_options[index];\n\n        if (element[0] === spot[0] && element[1] === spot[1]) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.updateStatus = game => {\n      console.log(\"hi\");\n\n      if (game.isCheck()) {\n        if (game.isCheckMate()) {\n          this.props.updateStatus(\"CHECKMATE!\");\n        } else {\n          this.props.updateStatus(\"CHECK!\");\n        }\n      } else if (game.isPat()) {\n        this.props.updateStatus(\"PAT!\");\n      } else {\n        this.props.updateStatus(\"\");\n      }\n    };\n  }\n\n  render() {\n    const graphicBoard = this.props.board.map(row => row.map(piece => /*#__PURE__*/_jsxDEV(Block, {\n      piece: piece,\n      handleClick: this.handleClick,\n      isOption: this.IsSpotInOptions(piece.spot, this.state.move_options)\n    }, piece.spot, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 76\n    }, this)));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: graphicBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["C:/Users/user/Desktop/Computer_Science/ChessWeb1/src/Components/Board.js"],"names":["React","Block","Game","Board","Component","constructor","IsSpotInOptions","spot","move_options","index","length","element","updateStatus","game","console","log","isCheck","isCheckMate","props","isPat","render","graphicBoard","board","map","row","piece","handleClick","state"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,IAAT,QAAqB,QAArB;;AAEA,MAAMC,KAAN,SAAoBH,KAAK,CAACI,SAA1B,CAAoC;AAChCC,EAAAA,WAAW,GAAI;AACX,YADW,CAEX;AACA;AACA;AACA;AACA;;AANW,SAWbC,eAXa,GAWK,CAACC,IAAD,EAAMC,YAAN,KAAuB;AACvC,WAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,YAAY,CAACE,MAAzC,EAAiDD,KAAK,EAAtD,EAA0D;AACxD,cAAME,OAAO,GAAGH,YAAY,CAACC,KAAD,CAA5B;;AACA,YAAIE,OAAO,CAAC,CAAD,CAAP,KAAeJ,IAAI,CAAC,CAAD,CAAnB,IAA0BI,OAAO,CAAC,CAAD,CAAP,KAAeJ,IAAI,CAAC,CAAD,CAAjD,EAAsD;AACpD,iBAAO,IAAP;AACD;AACF;;AACD,aAAO,KAAP;AACD,KAnBY;;AAAA,SAqBbK,YArBa,GAqBGC,IAAD,IAAU;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;;AACA,UAAIF,IAAI,CAACG,OAAL,EAAJ,EAAoB;AAClB,YAAIH,IAAI,CAACI,WAAL,EAAJ,EAAwB;AACtB,eAAKC,KAAL,CAAWN,YAAX,CAAwB,YAAxB;AACD,SAFD,MAGI;AACF,eAAKM,KAAL,CAAWN,YAAX,CAAwB,QAAxB;AACD;AACF,OAPD,MAQK,IAAIC,IAAI,CAACM,KAAL,EAAJ,EAAiB;AACpB,aAAKD,KAAL,CAAWN,YAAX,CAAwB,MAAxB;AACD,OAFI,MAGD;AACF,aAAKM,KAAL,CAAWN,YAAX,CAAwB,EAAxB;AACD;AACF,KArCY;AAOd;;AAgCCQ,EAAAA,MAAM,GAAI;AACR,UAAMC,YAAY,GAAI,KAAKH,KAAL,CAAWI,KAAX,CAAiBC,GAAjB,CAAqBC,GAAG,IAAIA,GAAG,CAACD,GAAJ,CAAQE,KAAK,iBAAI,QAAC,KAAD;AAA0B,MAAA,KAAK,EAAIA,KAAnC;AAA0C,MAAA,WAAW,EAAI,KAAKC,WAA9D;AAA2E,MAAA,QAAQ,EAAI,KAAKpB,eAAL,CAAqBmB,KAAK,CAAClB,IAA3B,EAAgC,KAAKoB,KAAL,CAAWnB,YAA3C;AAAvF,OAAciB,KAAK,CAAClB,IAApB;AAAA;AAAA;AAAA;AAAA,YAAjB,CAA5B,CAAtB;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,gBACKc;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAKD;;AA/C6B;;AAiDpC,eAAelB,KAAf","sourcesContent":["import React from \"react\";\r\nimport Block from \"./Block\"\r\nimport { Game } from \"./Game\";\r\n\r\nclass Board extends React.Component {\r\n    constructor () {\r\n        super()\r\n        // this.state = {\r\n        //   piece: null,\r\n        //   game: new Game(),\r\n        //   move_options: []\r\n        // }\r\n    }\r\n\r\n    \r\n\r\n      IsSpotInOptions = (spot,move_options) => {\r\n        for (let index = 0; index < move_options.length; index++) {\r\n          const element = move_options[index];\r\n          if (element[0] === spot[0] && element[1] === spot[1]) {\r\n            return true\r\n          }\r\n        }\r\n        return false\r\n      }\r\n      \r\n      updateStatus = (game) => {\r\n        console.log(\"hi\")\r\n        if (game.isCheck()) {\r\n          if (game.isCheckMate()) {\r\n            this.props.updateStatus(\"CHECKMATE!\")\r\n          }\r\n          else{\r\n            this.props.updateStatus(\"CHECK!\")\r\n          }\r\n        }\r\n        else if (game.isPat()){\r\n          this.props.updateStatus(\"PAT!\")\r\n        }\r\n        else{\r\n          this.props.updateStatus(\"\")\r\n        }\r\n      }\r\n\r\n      render () {\r\n        const graphicBoard =  this.props.board.map(row => row.map(piece => <Block key = {piece.spot} piece = {piece} handleClick = {this.handleClick} isOption = {this.IsSpotInOptions(piece.spot,this.state.move_options)}/>))\r\n        return (\r\n            <div className=\"board\">\r\n                {graphicBoard}\r\n            </div> \r\n        )\r\n      }  \r\n}\r\nexport default Board"]},"metadata":{},"sourceType":"module"}