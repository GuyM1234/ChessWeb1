{"ast":null,"code":"import { Piece, Pawn, Rook, Bishop, Queen, King, Knight } from \"./pieces\";\nimport SpotInOptions from \"./Methods\";\nexport class Game {\n  constructor() {\n    this.turn = 'w';\n    this.whiteKing = new King([7, 4], 'K', 'w');\n    this.blackKing = new King([0, 4], 'K', 'b');\n    this.board = this.createBoard();\n  }\n\n  createBoard() {\n    const board = [];\n\n    for (let rowindex = 0; rowindex < 8; rowindex++) {\n      const row = [];\n\n      for (let columnindex = 0; columnindex < 8; columnindex++) {\n        let p = new Piece([rowindex, columnindex], '0', 'e', \"\");\n        row.push(p);\n      }\n\n      board.push(row);\n    }\n\n    board[6] = board[6].map((x, index) => new Pawn([6, index], 'P', 'w'));\n    board[1] = board[1].map((x, index) => new Pawn([1, index], 'P', 'b'));\n    board[7][4] = this.whiteKing;\n    board[0][4] = this.blackKing;\n    board[7][3] = new Queen([7, 3], 'Q', 'w');\n    board[0][3] = new Queen([0, 3], 'Q', 'b');\n    board[7][0] = new Rook([7, 0], 'R', 'w');\n    board[7][7] = new Rook([7, 7], 'R', 'w');\n    board[0][0] = new Rook([0, 0], 'R', 'b');\n    board[0][7] = new Rook([0, 7], 'R', 'b');\n    board[7][2] = new Bishop([7, 2], 'B', 'w');\n    board[7][5] = new Bishop([7, 5], 'B', 'w');\n    board[0][2] = new Bishop([0, 2], 'B', 'b');\n    board[0][5] = new Bishop([0, 5], 'B', 'b');\n    board[7][1] = new Knight([7, 1], 'k', 'w');\n    board[7][6] = new Knight([7, 6], 'k', 'w');\n    board[0][1] = new Knight([0, 1], 'k', 'b');\n    board[0][6] = new Knight([0, 6], 'k', 'b');\n    return board;\n  }\n\n  update(chosen_spot, piece) {\n    this.board[chosen_spot[0]][chosen_spot[1]] = piece;\n    this.board[piece.spot[0]][piece.spot[1]] = new Piece(piece.spot, '0', 'e');\n  }\n\n  updateTurn() {\n    if (this.turn === 'w') {\n      this.turn = 'b';\n    } else {\n      this.turn = 'w';\n    }\n  }\n\n  isCheck() {\n    for (let row = 0; row < this.board.length; row++) {\n      for (let column = 0; column < this.board[row].length; column++) {\n        const piece = this.board[row][column]; // const move_options = piece.move_options(this)\n\n        if (this.turn === 'w') {\n          if (SpotInOptions(this.whiteKing.spot, move_options)) {\n            console.log(piece);\n            return true;\n          }\n        } else if (SpotInOptions(this.blackKing.spot, move_options)) {\n          console.log(piece);\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isCheckMate() {\n    for (let row = 0; row < this.board.length; row++) {\n      for (let column = 0; column < this.board[row].length; column++) {\n        const piece = this.board[row][column];\n\n        if (piece.color === this.turn) {\n          const move_options = piece.getAvaliableMoves(this);\n\n          if (move_options.length > 0) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  isPat() {\n    return this.isCheckMate();\n  }\n\n}\nexport class Copy_Game extends Game {\n  constructor(game) {\n    super();\n    this.turn = game.turn;\n    this.board = this.createCopyBoard(game.board);\n    this.whiteKing = this.board[game.whiteKing.spot[0]][game.whiteKing.spot[1]];\n    this.blackKing = this.board[game.blackKing.spot[0]][game.blackKing.spot[1]];\n  }\n\n  createCopyBoard(board) {\n    const copy_board = [];\n\n    for (let rowindex = 0; rowindex < 8; rowindex++) {\n      const row = [];\n\n      for (let columnindex = 0; columnindex < 8; columnindex++) {\n        let p = board[rowindex][columnindex].create_copy();\n        row.push(p);\n      }\n\n      copy_board.push(row);\n    }\n\n    return copy_board;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/Computer_Science/ChessWeb1/src/Components/Game.js"],"names":["Piece","Pawn","Rook","Bishop","Queen","King","Knight","SpotInOptions","Game","constructor","turn","whiteKing","blackKing","board","createBoard","rowindex","row","columnindex","p","push","map","x","index","update","chosen_spot","piece","spot","updateTurn","isCheck","length","column","move_options","console","log","isCheckMate","color","getAvaliableMoves","isPat","Copy_Game","game","createCopyBoard","copy_board","create_copy"],"mappings":"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","sourcesContent":["import { Piece, Pawn, Rook, Bishop, Queen, King, Knight} from \"./pieces\"\r\nimport SpotInOptions from \"./Methods\"\r\n\r\nexport class Game {\r\n    constructor() {\r\n        this.turn = 'w'\r\n        this.whiteKing = new King([7,4],'K','w')\r\n        this.blackKing = new King([0,4],'K','b')\r\n        this.board = this.createBoard()\r\n    }\r\n\r\n    createBoard () {\r\n        const board = []\r\n        for (let rowindex = 0; rowindex < 8; rowindex++) {\r\n            const row = []\r\n            for (let columnindex = 0; columnindex < 8; columnindex++) {\r\n                let p = new Piece([rowindex,columnindex],'0','e',\"\")\r\n                row.push(p);\r\n            }\r\n            board.push(row)\r\n        }\r\n        board[6] = board[6].map((x,index) => new Pawn([6,index],'P','w'))\r\n        board[1] = board[1].map((x,index) => new Pawn([1,index],'P','b'))\r\n        board[7][4] = this.whiteKing\r\n        board[0][4] = this.blackKing\r\n        board[7][3] = new Queen([7,3],'Q','w')\r\n        board[0][3] = new Queen([0,3],'Q','b')\r\n        board[7][0] = new Rook([7,0],'R','w')\r\n        board[7][7] = new Rook([7,7],'R','w')\r\n        board[0][0] = new Rook([0,0],'R','b')\r\n        board[0][7] = new Rook([0,7],'R','b')\r\n        board[7][2] = new Bishop([7,2],'B','w')\r\n        board[7][5] = new Bishop([7,5],'B','w')\r\n        board[0][2] = new Bishop([0,2],'B','b')\r\n        board[0][5] = new Bishop([0,5],'B','b')\r\n        board[7][1] = new Knight([7,1],'k','w')\r\n        board[7][6] = new Knight([7,6],'k','w')\r\n        board[0][1] = new Knight([0,1],'k','b')\r\n        board[0][6] = new Knight([0,6],'k','b')\r\n        return board;\r\n    } \r\n    \r\n    update (chosen_spot, piece) {\r\n        this.board[chosen_spot[0]][chosen_spot[1]] = piece;\r\n        this.board[piece.spot[0]][piece.spot[1]] = new Piece(piece.spot,'0','e');\r\n    }\r\n\r\n    updateTurn () {\r\n        if (this.turn === 'w'){\r\n            this.turn = 'b'\r\n        } else{\r\n            this.turn = 'w'\r\n        }\r\n    }\r\n\r\n    isCheck () {\r\n        for (let row = 0; row < this.board.length; row++) {\r\n            for (let column = 0; column < this.board[row].length; column++) {\r\n                const piece = this.board[row][column]\r\n                // const move_options = piece.move_options(this)\r\n                if (this.turn === 'w') {\r\n                    if (SpotInOptions(this.whiteKing.spot,move_options)) {\r\n                        console.log(piece)\r\n                        return true\r\n                    }\r\n                }\r\n                else if (SpotInOptions(this.blackKing.spot,move_options)) {\r\n                    console.log(piece)\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    \r\n    isCheckMate() {\r\n        for (let row = 0; row < this.board.length; row++) {\r\n            for (let column = 0; column < this.board[row].length; column++) {\r\n                const piece = this.board[row][column]\r\n                if (piece.color === this.turn) {\r\n                    const move_options = piece.getAvaliableMoves(this)\r\n                    if (move_options.length > 0) {\r\n                        return false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    \r\n    isPat() {\r\n        return this.isCheckMate()\r\n    }\r\n    \r\n}\r\n\r\nexport class Copy_Game extends Game {\r\n    constructor (game) {\r\n        super()\r\n        this.turn = game.turn\r\n        this.board = this.createCopyBoard(game.board)\r\n        this.whiteKing = this.board[game.whiteKing.spot[0]][game.whiteKing.spot[1]]\r\n        this.blackKing = this.board[game.blackKing.spot[0]][game.blackKing.spot[1]]\r\n    }\r\n    createCopyBoard (board) {\r\n        const copy_board = []\r\n        for (let rowindex = 0; rowindex < 8; rowindex++) {\r\n            const row = []\r\n            for (let columnindex = 0; columnindex < 8; columnindex++) {\r\n                let p = board[rowindex][columnindex].create_copy()\r\n                row.push(p);\r\n            }\r\n            copy_board.push(row)\r\n        }\r\n        return copy_board\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}