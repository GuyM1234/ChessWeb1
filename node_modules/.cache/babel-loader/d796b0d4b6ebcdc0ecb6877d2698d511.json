{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Computer_Science\\\\ChessWeb1\\\\src\\\\Components\\\\Board.js\";\nimport React from \"react\";\nimport Block from \"./Block\";\nimport Game from \"./Game\";\n\nclass Board extends React.Component {\n  constructor() {\n    super();\n\n    this.handlePiece = piece => {\n      const row = piece.spot[0];\n      const column = piece.spot[1];\n      this.setState(prevState => {\n        if (this.state.piece == null) {\n          console.log(this.state.game.turn);\n\n          if (this.state.game.turn === piece.color) {\n            const move_options = piece.move_options(this.state.game.board);\n            prevState.game.updateTurn();\n\n            if (move_options.length > 0) {\n              return {\n                piece: piece,\n                game: prevState.game,\n                move_options: move_options\n              };\n            }\n          }\n        } else {\n          if (this.IsSpotInOptions(piece.spot, this.state.move_options)) {\n            this.state.game.board[prevState.piece.spot[0]][prevState.piece.spot[1]].move([row, column], this.state.game);\n          }\n\n          return {\n            piece: null,\n            game: this.state.game,\n            move_options: []\n          };\n        }\n      });\n    };\n\n    this.IsSpotInOptions = (spot, move_options) => {\n      for (let index = 0; index < move_options.length; index++) {\n        const element = move_options[index];\n\n        if (element[0] === spot[0] && element[1] === spot[1]) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.state = {\n      piece: null,\n      game: new Game(),\n      move_options: []\n    };\n  }\n\n  render() {\n    const graphicBoard = this.state.game.board.map(row => row.map(piece => /*#__PURE__*/_jsxDEV(Block, {\n      piece: piece,\n      handlePiece: this.handlePiece,\n      isOption: this.IsSpotInOptions(piece.spot, this.state.move_options)\n    }, piece.spot, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 81\n    }, this)));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: graphicBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["C:/Users/user/Desktop/Computer_Science/ChessWeb1/src/Components/Board.js"],"names":["React","Block","Game","Board","Component","constructor","handlePiece","piece","row","spot","column","setState","prevState","state","console","log","game","turn","color","move_options","board","updateTurn","length","IsSpotInOptions","move","index","element","render","graphicBoard","map"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Block from \"./Block\"\r\nimport Game from \"./Game\";\r\n\r\nclass Board extends React.Component {\r\n    constructor () {\r\n        super()\r\n        this.state = {\r\n          piece: null,\r\n          game: new Game(),\r\n          move_options: []\r\n        }\r\n    }\r\n    handlePiece = (piece) => {\r\n        const row = piece.spot[0]\r\n        const column = piece.spot[1]\r\n        this.setState(prevState => {\r\n          if (this.state.piece == null) {\r\n            console.log(this.state.game.turn)\r\n            if (this.state.game.turn === piece.color) {\r\n              const move_options = piece.move_options(this.state.game.board) \r\n              prevState.game.updateTurn()\r\n              if (move_options.length > 0) { \r\n                return {piece: piece, game: prevState.game, move_options: move_options}\r\n              }\r\n            }\r\n          }\r\n          else{\r\n            if (this.IsSpotInOptions(piece.spot, this.state.move_options)) {\r\n              this.state.game.board[prevState.piece.spot[0]][prevState.piece.spot[1]].move([row,column],this.state.game)\r\n            }\r\n            return {piece: null, game: this.state.game, move_options: []}\r\n          }\r\n        })\r\n      }\r\n\r\n      IsSpotInOptions = (spot,move_options) => {\r\n        for (let index = 0; index < move_options.length; index++) {\r\n          const element = move_options[index];\r\n          if (element[0] === spot[0] && element[1] === spot[1]) {\r\n            return true\r\n          }\r\n        }\r\n        return false\r\n      }\r\n\r\n      render () {\r\n        const graphicBoard =  this.state.game.board.map(row => row.map(piece => <Block key = {piece.spot} piece = {piece} handlePiece = {this.handlePiece} isOption = {this.IsSpotInOptions(piece.spot,this.state.move_options)}/>))\r\n        return (\r\n            <div className=\"board\">\r\n                {graphicBoard}\r\n            </div> \r\n        )\r\n      }  \r\n}\r\nexport default Board"]},"metadata":{},"sourceType":"module"}