{"version":3,"sources":["Components/Option.js","Components/Block.js","Components/Methods.js","Components/Board.js","Components/pieces.js","Components/Game.js","Components/Timer.js","App.js","index.js"],"names":["Option","className","picture","Block","props","piece","pic","color","lett","spot","isOption","nextProps","change","this","onClick","handleClick","src","alt","draw","React","Component","SpotInOptions","move_options","index","length","element","Board","state","board","graphicBoard","map","row","Piece","moved","game","newMoveOptions","option","copyGame","Copy_Game","move","isCheck","push","chosen_spot","update","rowDir","columnDir","option_list","column","blocked","is_spot_free","is_spot_eatable","move_option","Pawn","Queen","Rook","check_dir","Bishop","King","options","route1","route2","castle","route","rook","i","square","Knight","Game","turn","whiteKing","blackKing","createBoard","rowindex","columnindex","p","x","getAvaliableMoves","isCheckMate","createCopyBoard","copy_board","create_copy","Timer","startClock","myInterval","setInterval","setState","prevState","time","stopClock","lost","clearInterval","formatTimer","minutes","Math","floor","seconds","prevProps","App","updateTurn","status","updateStatus","isPat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2996aea.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst Option = () => {\r\n    return (\r\n        <div className=\"option\"></div>\r\n    )\r\n}\r\n\r\nexport default Option","\r\nimport React from \"react\"\r\nimport Option from \"./Option\"\r\n\r\nconst picture  = {'w' : { 'P': \"WhitePawn.png\",\r\n                         'R': \"WhiteRook.png\",\r\n                         'B': \"WhiteBishop.png\",\r\n                        'k': \"WhiteKnight.png\",\r\n                        'Q': \"WhiteQueen.png\",\r\n                        'K': \"WhiteKing.png\" \r\n                    },\r\n                'b' : { 'P': \"BlackPawn.png\",\r\n                        'R': \"BlackRook.png\",\r\n                        'B': \"BlackBishop.png\",\r\n                        'k': \"BlackKnight.png\",\r\n                        'Q': \"BlackQueen.png\",\r\n                        'K': \"BlackKing.png\"\r\n                    },\r\n                'e': {\r\n                    '0': \"\"\r\n                }\r\n                \r\n}\r\n\r\nclass Block extends React.Component {\r\n    constructor (props) {\r\n        super() \r\n        this.piece = props.piece\r\n        this.pic = \".\\\\Chesspieceses\\\\\" + picture[this.piece.color][this.piece.lett]\r\n        if ((this.piece.spot[0] + this.piece.spot[1]) % 2 === 0 ) {\r\n            this.className = \"block white\"\r\n        } else {\r\n            this.className = \"block black\"\r\n        }\r\n        this.isOption = false\r\n    }\r\n\r\n    shouldComponentUpdate (nextProps) {\r\n        let change = false\r\n        if (nextProps.piece !== this.props.piece)  {\r\n            this.piece = nextProps.piece\r\n            this.pic = \".\\\\Chesspieceses\\\\\" + picture[this.piece.color][this.piece.lett]\r\n            change = true\r\n        }\r\n        if (nextProps.isOption !== this.props.isOption) {\r\n            this.isOption = nextProps.isOption\r\n            change = true\r\n        }\r\n        return change\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className={this.className} onClick={() => this.props.handleClick(this.piece)}>\r\n                <img className=\"piece\" src={this.pic} alt=\"\"></img>\r\n                {this.isOption && <Option draw = {this.isOption}/>}\r\n            </div>\r\n        )\r\n    \r\n        \r\n    }\r\n}\r\nexport default Block\r\n\r\n","\r\n\r\nexport const get_opp_color= (color) => {\r\n  return color === 'w' ? 'b' : 'w'\r\n}\r\n\r\nfunction SpotInOptions (spot,move_options) {\r\n    for (let index = 0; index < move_options.length; index++) {\r\n      const element = move_options[index];\r\n      if (element[0] === spot[0] && element[1] === spot[1]) {\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n}\r\nexport default SpotInOptions","import React from \"react\";\r\nimport Block from \"./Block\"\r\nimport SpotInOptions from \"./Methods\"\r\n\r\nclass Board extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n          board: this.props.board,\r\n          move_options: this.props.move_options\r\n        }\r\n    }\r\n\r\n    render () {\r\n      const graphicBoard =  this.props.board.map(row => row.map(piece => <Block key = {piece.spot} piece = {piece} handleClick = {this.props.handleClick} isOption = {SpotInOptions(piece.spot,this.props.move_options)}/>))\r\n      return (\r\n          <div className=\"board\">\r\n              {graphicBoard}\r\n          </div> \r\n      )\r\n    }  \r\n}\r\nexport default Board","import { get_opp_color } from \"./Methods\";\r\nimport {Copy_Game} from \"./Game\"\r\n\r\n\r\nexport class Piece {\r\n    constructor (spot,lett,color){\r\n        this.spot = spot\r\n        this.lett = lett\r\n        this.color = color\r\n        this.moved = false\r\n    }\r\n\r\n    move_options() {\r\n        return []\r\n    }\r\n\r\n    getAvaliableMoves(game) {\r\n        const move_options = this.move_options(game)\r\n        let newMoveOptions = []\r\n        for (let index = 0; index < move_options.length; index++) {\r\n            const option = move_options[index];\r\n            const copyGame = new Copy_Game(game)\r\n            copyGame.board[this.spot[0]][this.spot[1]].move(option,copyGame)\r\n            if (!copyGame.isCheck()) {\r\n                newMoveOptions.push(option)\r\n            }\r\n        }\r\n        return newMoveOptions\r\n    }\r\n\r\n    move (chosen_spot,game){\r\n        game.update(chosen_spot,this)\r\n        this.spot = chosen_spot\r\n        if (!this.moved) {\r\n            this.moved = true\r\n        }\r\n    }\r\n    \r\n    check_dir (rowDir,columnDir,board,option_list) {\r\n        let row = this.spot[0]\r\n        let column = this.spot[1]\r\n        let blocked = false\r\n        while (!blocked) {\r\n            row += rowDir\r\n            column += columnDir\r\n            if (!this.is_spot_free(row ,column, board, option_list)){\r\n                blocked = true;\r\n                this.is_spot_eatable(row, column, board, option_list);\r\n            }\r\n        }\r\n    }\r\n\r\n    create_copy () {\r\n        return new Piece(this.spot,this.lett,this.color)\r\n    }\r\n    \r\n    is_spot_free(row,column,board,move_option) {\r\n        try {\r\n            if (board[row][column].color === \"e\"){\r\n                move_option.push([row,column])\r\n                return true;\r\n            }\r\n            else{\r\n                return false;\r\n            }\r\n        }\r\n        catch {}\r\n    }\r\n\r\n    is_spot_eatable(row,column,board,move_option) {\r\n        try{\r\n            if (board[row][column].color === get_opp_color(this.color)){\r\n                move_option.push([row,column])\r\n            }\r\n        }\r\n        catch {}\r\n    }\r\n}\r\n\r\nexport class Pawn extends Piece{\r\n    move (chosen_spot,game) {\r\n        super.move(chosen_spot,game)\r\n        if (this.spot[0] === 0 || this.spot[0] === 7) {\r\n            game.board[this.spot[0]][this.spot[1]] = new Queen(this.spot,'Q',this.color)\r\n        }\r\n    }\r\n\r\n    move_options(game) {\r\n        const board = game.board\r\n        const row = this.spot[0]\r\n        const column = this.spot[1]\r\n        const move_options = []\r\n        if  (this.color === \"w\"){\r\n            this.is_spot_free(row - 1, column,board,move_options)\r\n            if (!this.moved){\r\n                this.is_spot_free(row - 2,column,board,move_options)\r\n            } \r\n            this.is_spot_eatable(row - 1, column + 1,board,move_options)\r\n            this.is_spot_eatable(row - 1, column - 1,board,move_options)\r\n        }\r\n        else {\r\n            this.is_spot_free(row + 1, column,board,move_options)\r\n            if (!this.moved){\r\n                this.is_spot_free(row + 2,column,board,move_options)\r\n            }\r\n            this.is_spot_eatable(row + 1, column + 1,board,move_options)\r\n            this.is_spot_eatable(row + 1, column - 1,board,move_options)\r\n        }\r\n        return move_options;\r\n    }\r\n\r\n    create_copy () {\r\n        return new Pawn(this.spot,this.lett,this.color)\r\n    }\r\n}\r\n\r\nexport class Rook extends Piece{\r\n    move_options(game) {\r\n        const board = game.board\r\n        const option_list = [];\r\n        this.check_dir(1,0,board,option_list)\r\n        this.check_dir(-1,0,board,option_list)\r\n        this.check_dir(0,1,board,option_list)\r\n        this.check_dir(0,-1,board,option_list)\r\n        return option_list\r\n    }\r\n    create_copy () {\r\n        return new Rook(this.spot,this.lett,this.color)\r\n    }\r\n}\r\n\r\nexport class Bishop extends Piece{\r\n    move_options(game) {\r\n        const board = game.board\r\n        const option_list = [];\r\n        this.check_dir(1,1,board,option_list)\r\n        this.check_dir(-1,-1,board,option_list)\r\n        this.check_dir(-1,1,board,option_list)\r\n        this.check_dir(1,-1,board,option_list)\r\n        return option_list\r\n    }\r\n    create_copy () {\r\n        return new Bishop(this.spot,this.lett,this.color)\r\n    }\r\n}\r\n\r\nexport class Queen extends Piece {\r\n    move_options(game) {\r\n        const board = game.board\r\n        let option_list = []\r\n        this.check_dir(1,0,board,option_list)\r\n        this.check_dir(-1,0,board,option_list)\r\n        this.check_dir(0,1,board,option_list)\r\n        this.check_dir(0,-1,board,option_list)\r\n        this.check_dir(1,1,board,option_list)\r\n        this.check_dir(-1,-1,board,option_list)\r\n        this.check_dir(-1,1,board,option_list)\r\n        this.check_dir(1,-1,board,option_list)\r\n        return option_list\r\n    }\r\n    create_copy () {\r\n        return new Queen(this.spot,this.lett,this.color)\r\n    }\r\n}\r\n\r\nexport class King extends Piece {\r\n    move (chosen_spot,game) {\r\n        if (!this.moved) {\r\n            if (chosen_spot[1] === 2) {\r\n                game.board[this.spot[0]][0].move([this.spot[0],3],game)\r\n            }\r\n            if (chosen_spot[1] === 6) {\r\n                game.board[this.spot[0]][7].move([this.spot[0],5],game)\r\n            }\r\n        }\r\n        super.move(chosen_spot,game)\r\n    }\r\n\r\n    move_options(game) {\r\n        const board = game.board\r\n        const option_list = []\r\n        const row = this.spot[0]\r\n        const column = this.spot[1]\r\n        const options = [[row + 1,column],[row + 1,column + 1],\r\n        [row,column + 1],[row - 1,column + 1],[row - 1,column],\r\n        [row -1 ,column -1],[row,column - 1],[row + 1,column -1]]\r\n\r\n        let option\r\n        for (let index = 0; index < options.length; index++) {\r\n            option = options[index]\r\n            if (!this.is_spot_free(option[0],option[1],board,option_list)){\r\n                this.is_spot_eatable(option[0],option[1],board,option_list)\r\n            }\r\n        }\r\n        \r\n        const route1 = [[this.spot[0],3],[this.spot[0],2],[this.spot[0],1]]\r\n        const route2 = [[this.spot[0],5],[this.spot[0],6]]\r\n        try{\r\n            if (this.castle(game,route1, game.board[this.spot[0]][0])) {\r\n                option_list.push([this.spot[0],2])\r\n            }\r\n            if (this.castle(game,route2, game.board[this.spot[0]][7])) {\r\n                option_list.push([this.spot[0],6])\r\n            }\r\n        }\r\n        catch{}\r\n        return option_list\r\n    }\r\n\r\n    castle (game,route,rook) {\r\n        if (!this.moved && !rook.moved) {\r\n            for (let i = 0; i < route.length; i++) {\r\n                const square = route[i];\r\n                if (game.board[square[0]][square[1]].color !== 'e') {\r\n                    return false\r\n                }\r\n                const copyGame = new Copy_Game(game)\r\n                copyGame.board[this.spot[0]][this.spot[1]].move(square,copyGame)\r\n                if (copyGame.isCheck()) {\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return false\r\n        } \r\n        return true\r\n    }\r\n\r\n    create_copy () {\r\n        return new King(this.spot,this.lett,this.color)\r\n    }\r\n}\r\n\r\nexport class Knight extends Piece {\r\n    move_options(game) {\r\n        const board = game.board\r\n        const option_list = []\r\n        const row = this.spot[0]\r\n        const column = this.spot[1]\r\n\r\n        const options = [[row + 2,column + 1],[row + 2,column - 1],\r\n        [row - 1,column + 2],[row - 2,column + 1],[row - 2,column - 1],\r\n        [row + 1 ,column + 2],[row + 1,column - 2],[row - 1,column -2]]\r\n        let option\r\n        for (let index = 0; index < options.length; index++) {\r\n            option = options[index]\r\n            if (!this.is_spot_free(option[0],option[1],board,option_list)){\r\n                this.is_spot_eatable(option[0],option[1],board,option_list)\r\n            }\r\n        }\r\n        return option_list\r\n    }\r\n\r\n    create_copy () {\r\n        return new Knight(this.spot,this.lett,this.color)\r\n    }\r\n}","import { Piece, Pawn, Rook, Bishop, Queen, King, Knight} from \"./pieces\"\r\nimport SpotInOptions from \"./Methods\"\r\n\r\nexport class Game {\r\n    constructor() {\r\n        this.turn = 'w'\r\n        this.whiteKing = new King([7,4],'K','w')\r\n        this.blackKing = new King([0,4],'K','b')\r\n        this.board = this.createBoard()\r\n    }\r\n\r\n    createBoard () {\r\n        const board = []\r\n        for (let rowindex = 0; rowindex < 8; rowindex++) {\r\n            const row = []\r\n            for (let columnindex = 0; columnindex < 8; columnindex++) {\r\n                let p = new Piece([rowindex,columnindex],'0','e',\"\")\r\n                row.push(p);\r\n            }\r\n            board.push(row)\r\n        }\r\n        board[6] = board[6].map((x,index) => new Pawn([6,index],'P','w'))\r\n        board[1] = board[1].map((x,index) => new Pawn([1,index],'P','b'))\r\n        board[7][4] = this.whiteKing\r\n        board[0][4] = this.blackKing\r\n        board[7][3] = new Queen([7,3],'Q','w')\r\n        board[0][3] = new Queen([0,3],'Q','b')\r\n        board[7][0] = new Rook([7,0],'R','w')\r\n        board[7][7] = new Rook([7,7],'R','w')\r\n        board[0][0] = new Rook([0,0],'R','b')\r\n        board[0][7] = new Rook([0,7],'R','b')\r\n        board[7][2] = new Bishop([7,2],'B','w')\r\n        board[7][5] = new Bishop([7,5],'B','w')\r\n        board[0][2] = new Bishop([0,2],'B','b')\r\n        board[0][5] = new Bishop([0,5],'B','b')\r\n        board[7][1] = new Knight([7,1],'k','w')\r\n        board[7][6] = new Knight([7,6],'k','w')\r\n        board[0][1] = new Knight([0,1],'k','b')\r\n        board[0][6] = new Knight([0,6],'k','b')\r\n        return board;\r\n    } \r\n    \r\n    update (chosen_spot, piece) {\r\n        this.board[chosen_spot[0]][chosen_spot[1]] = piece;\r\n        this.board[piece.spot[0]][piece.spot[1]] = new Piece(piece.spot,'0','e');\r\n    }\r\n\r\n    updateTurn () {\r\n        if (this.turn === 'w'){\r\n            this.turn = 'b'\r\n        } else{\r\n            this.turn = 'w'\r\n        }\r\n    }\r\n\r\n    isCheck () {\r\n        for (let row = 0; row < this.board.length; row++) {\r\n            for (let column = 0; column < this.board[row].length; column++) {\r\n                const piece = this.board[row][column]\r\n                if (piece.lett !== 'K') {\r\n                    const move_options = piece.move_options(this)\r\n                    if (this.turn === 'w') {\r\n                        if (SpotInOptions(this.whiteKing.spot,move_options)) {\r\n                            return true\r\n                    }\r\n                }\r\n                else if (SpotInOptions(this.blackKing.spot,move_options)) {\r\n                    return true\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    \r\n    isCheckMate() {\r\n        for (let row = 0; row < this.board.length; row++) {\r\n            for (let column = 0; column < this.board[row].length; column++) {\r\n                const piece = this.board[row][column]\r\n                if (piece.color === this.turn) {\r\n                    const move_options = piece.getAvaliableMoves(this)\r\n                    if (move_options.length > 0) {\r\n                        return false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    \r\n    isPat() {\r\n        return this.isCheckMate()\r\n    }\r\n    \r\n}\r\n\r\nexport class Copy_Game extends Game {\r\n    constructor (game) {\r\n        super()\r\n        this.turn = game.turn\r\n        this.board = this.createCopyBoard(game.board)\r\n        this.whiteKing = this.board[game.whiteKing.spot[0]][game.whiteKing.spot[1]]\r\n        this.blackKing = this.board[game.blackKing.spot[0]][game.blackKing.spot[1]]\r\n    }\r\n    \r\n    createCopyBoard (board) {\r\n        const copy_board = []\r\n        for (let rowindex = 0; rowindex < 8; rowindex++) {\r\n            const row = []\r\n            for (let columnindex = 0; columnindex < 8; columnindex++) {\r\n                let p = board[rowindex][columnindex].create_copy()\r\n                row.push(p);\r\n            }\r\n            copy_board.push(row)\r\n        }\r\n        return copy_board\r\n    }\r\n}","import React from \"react\"\r\n\r\n\r\n\r\nclass Timer extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            color: props.color,\r\n            time: 900\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        if (this.props.turn === 'b') {\r\n            this.startClock()\r\n        }\r\n    }\r\n\r\n    componentDidUpdate (prevProps) {\r\n        if (prevProps.turn !== this.props.turn) {\r\n            if (this.props.turn === this.state.color) {\r\n                this.startClock()\r\n            }\r\n            else{\r\n                this.stopClock()\r\n            }\r\n        }\r\n    }\r\n\r\n    startClock = () => {\r\n        this.myInterval = setInterval(() => {\r\n            this.setState(prevState => {\r\n                if (prevState.time === 1) {\r\n                    this.stopClock()\r\n                    return {time: prevState.time - 1, lost: true}\r\n                }\r\n                return {time: prevState.time - 1}\r\n            })\r\n        }, 1000)\r\n    }\r\n\r\n    stopClock = () => {\r\n        clearInterval(this.myInterval)\r\n    }\r\n    \r\n    formatTimer = () =>{\r\n        let time = \"\"\r\n        const minutes = Math.floor(this.state.time / 60)\r\n        const seconds = this.state.time % 60\r\n        if (minutes < 10) {\r\n            time += \"0\" + minutes + \":\"\r\n        }\r\n        else {\r\n            time += minutes + \":\"\r\n        }\r\n        if (seconds < 10) {\r\n            time += \"0\" + seconds\r\n        }\r\n        else {\r\n            time += seconds\r\n        }\r\n        return time\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"timer\">{this.formatTimer()}</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Timer","\r\nimport React from 'react';\r\nimport Board from \"./Components/Board\"\r\nimport { Game } from \"./Components/Game\";\r\nimport SpotInOptions from \"./Components/Methods\"\r\nimport Timer from \"./Components/Timer\"\r\n\r\nclass App extends React.Component {\r\n  constructor () {\r\n    super()\r\n    this.state = {\r\n      piece: null,\r\n      game: new Game(),\r\n      move_options: [],\r\n      status: \"\",\r\n\r\n    }\r\n  }\r\n\r\n  handleClick = (piece) => {\r\n    const row = piece.spot[0]\r\n    const column = piece.spot[1]\r\n    this.setState(prevState => {\r\n      if (this.state.piece == null) {\r\n        if (this.state.game.turn === piece.color) {\r\n          const move_options = piece.getAvaliableMoves(prevState.game)\r\n          if (move_options.length > 0) { \r\n            return {piece: piece, move_options: move_options}\r\n          }\r\n        }\r\n      }\r\n      else{\r\n        \r\n        if (SpotInOptions(piece.spot, this.state.move_options)) {\r\n          prevState.game.board[prevState.piece.spot[0]][prevState.piece.spot[1]].move([row,column],this.state.game)\r\n          prevState.game.updateTurn()\r\n        }\r\n        return {piece: null, game: prevState.game, move_options: [], status: this.updateStatus(prevState.game)}\r\n      }\r\n    })\r\n  }\r\n\r\n  updateStatus = () => {\r\n    if (this.state.game.isCheck()) {\r\n      if (this.state.game.isCheckMate()) {\r\n        return \"CHECKMATE!\"\r\n      }\r\n      else{\r\n        return \"CHECK!\"\r\n      }\r\n    }\r\n    else if (this.state.game.isPat()){\r\n      return \"PAT!\"\r\n    }\r\n    else{\r\n      return \" \"\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return(\r\n      <div className=\"game\">\r\n        <h1 className=\"status\">{this.state.status}</h1>\r\n        <Board board = {this.state.game.board} move_options = {this.state.move_options} handleClick = {this.handleClick}/>\r\n        <div className=\"timers\">\r\n          <Timer color = 'b' turn = {this.state.game.turn}/>\r\n          <Timer color = 'w' turn = {this.state.game.turn}/>\r\n        </div>\r\n      </div>\r\n     \r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./App\"\r\n\r\nReactDOM.render(\r\n  <App />\r\n  ,document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}